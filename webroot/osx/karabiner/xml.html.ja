<!DOCTYPE html>
<html lang="ja">
  <head>
    <meta charset="utf-8" />
    <title>private.xml Reference Manual - Karabiner - OS X用のソフトウェア</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- Bootstrap core CSS -->
    <link href="/assets/bootstrap/bootstrap-3.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

    <!-- Documentation extras -->
    <link href="/assets/bootstrap/bootstrap-3.3.0/docs/assets/css/docs.min.css" rel="stylesheet" />
    <link href="/css/pqrs.css?1391687151" rel="stylesheet" />

    <!-- Bootstrap extra -->
      <link href="/assets/bootstrap-prettify/prettify.css" rel="stylesheet" type="text/css"/>

    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->

    <!-- Favicons -->
    <link rel="shortcut icon" href="/favicon.ico" />
  </head>

  <body>

    <!-- Docs master nav -->
    <header class="navbar navbar-static-top bs-docs-nav">
      <div class="container">
        <div class="navbar-header">
          <button class="navbar-toggle" type="button" data-toggle="collapse" data-target=".bs-navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>

          <a href="/index.html.ja" class="navbar-brand">pqrs.org</a>
        </div>
        <nav class="collapse navbar-collapse bs-navbar-collapse">
          <ul class="nav navbar-nav">
                <li >
                  <a href="/osx/karabiner/index.html.ja">Karabiner</a>
                </li>
                <li class="dropdown active">
                  <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                    ドキュメント
                    <b class="caret"></b>
                  </a>
                  <ul class="dropdown-menu">
                      <li >
                        <a href="/osx/karabiner/document.html.ja">マニュアル</a>
                      </li>
                      <li >
                        <a href="/osx/karabiner/gallery.html.ja">設定の一例</a>
                      </li>
                      <li class="active">
                        <a href="/osx/karabiner/xml.html.ja">private.xml（英語）</a>
                      </li>
                      <li >
                        <a href="/osx/karabiner/faq.html.ja">Q&amp;A</a>
                      </li>
                      <li >
                        <a href="/osx/karabiner/source.html.ja">ライセンス・ソースコード</a>
                      </li>
                      <li >
                        <a href="/osx/karabiner/history.html.ja">更新履歴</a>
                      </li>
                      <li >
                        <a href="/osx/karabiner/list.html.ja">あらかじめ用意されている設定項目一覧</a>
                      </li>
                  </ul>
                </li>
                <li class="dropdown">
                  <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                    追加アプリ
                    <b class="caret"></b>
                  </a>
                  <ul class="dropdown-menu">
                      <li >
                        <a href="/osx/karabiner/seil.html.ja">Seil</a>
                      </li>
                      <li >
                        <a href="/osx/karabiner/noejectdelay.html.ja">NoEjectDelay</a>
                      </li>
                  </ul>
                </li>
                <li >
                  <a href="/osx/karabiner/donation.html.ja">寄付</a>
                </li>
                <li >
                  <a href="/osx/karabiner/contact.html.ja">連絡先</a>
                </li>
          </ul>
          <ul class="nav navbar-nav navbar-right">
              <li >
                <a href="/profile.html.ja">プロフィール</a>
              </li>
            <li class="dropdown">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                Language
                <b class="caret"></b>
              </a>
              <ul class="dropdown-menu">
                <li><a href="/osx/karabiner/xml.html.en">English</a></li>
                <li><a href="/osx/karabiner/xml.html.ja">Japanese</a></li>
              </ul>
            </li>
          </ul>
        </nav>
      </div>
    </header>

    <div class="container">
  <header>
    <div class="page-header">
      <h1>private.xml Reference Manual</h1>
    </div>
  </header>

  <div class="row">
    <div class="col-md-9 pqrs-docs-container">
      <section>
        <div class="page-header">
          <h1 id="examples">Examples</h1>
        </div>

        <h2>A simple example of private.xml</h2>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;item&gt;
    &lt;name&gt;Swap Space and Tab&lt;/name&gt;
    &lt;identifier&gt;private.swap_space_and_tab&lt;/identifier&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::TAB&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::TAB, KeyCode::SPACE&lt;/autogen&gt;
  &lt;/item&gt;

  &lt;item&gt;
    &lt;name&gt;Change Right Command Key to Escape&lt;/name&gt;
    &lt;identifier&gt;private.right_command_to_escape&lt;/identifier&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::COMMAND_R, KeyCode::ESCAPE&lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>
        <p>
          Two settings will be added by this private.xml.
        </p>
        <div class="row">
          <div class="col-lg-4">
<a data-toggle="modal" href="#lightbox-1" class="thumbnail">
  <img src="img/karabiner-xml-example@2x.png" alt="preferences pane" />
</a>
<div class="modal fade" id="lightbox-1" tabindex="30001">
  <div class="modal-dialog clickable" style="width: 728px;">
    <div class="modal-content">
      <div class="modal-body">
        <img src="img/karabiner-xml-example@2x.png" alt="preferences pane" style="width: 100%" />
      </div>
    </div>
  </div>
</div>
          </div>
        </div>

        <h2 id="autogen-examples">Examples of &lt;autogen&gt;</h2>
        <p>
          There are a lot of examples of <code>&lt;autogen&gt;</code> in "Samples for Karabiner Binding Developers" at
          the bottom of Karabiner Prefs.
          <br />
          You can see the raw XML from <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/include/checkbox/samples.xml">samples.xml</a>.
        </p>
        <div class="row">
          <div class="col-lg-4">
<a data-toggle="modal" href="#lightbox-2" class="thumbnail">
  <img src="img/karabiner-samples-for-developers@2x.png" alt="Samples for Karabiner Developer" />
</a>
<div class="modal fade" id="lightbox-2" tabindex="30002">
  <div class="modal-dialog clickable" style="width: 728px;">
    <div class="modal-content">
      <div class="modal-body">
        <img src="img/karabiner-samples-for-developers@2x.png" alt="Samples for Karabiner Developer" style="width: 100%" />
      </div>
    </div>
  </div>
</div>
          </div>
        </div>
        <p>
        </p>
        <p>
          In addition, prepared settings are described in checkbox.xml.
          These are also good examples of <code>&lt;autogen&gt;</code>.
        </p>
        <ul>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/checkbox.xml">checkbox.xml</a>
          </li>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/tree/version_10.11.0/src/core/server/Resources/include/checkbox/">include/checkbox/</a>
          </li>
        </ul>

        <p>
          The XML is also installed into your machine. <br />
          See <code>/Applications/Karabiner.app/Contents/Resources/</code>.
        </p>
      </section>

      <section>
        <div class="page-header">
          <h1 id="basic-syntax">Basic syntax</h1>
        </div>
        <p>
          You can add a new setting by <code>&lt;item&gt;</code>.
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;

  &lt;item&gt;
    &lt;name&gt;Name of Setting&lt;/name&gt;
    &lt;appendix&gt;Optional Description of Setting&lt;/appendix&gt;
    &lt;identifier&gt;Unique Identifier of Setting&lt;/identifier&gt;
    &lt;autogen&gt;Behavior Definition&lt;/autogen&gt;
    &lt;autogen&gt;Behavior Definition&lt;/autogen&gt;
  &lt;/item&gt;

  &lt;item&gt;...&lt;/item&gt;

  &lt;item&gt;...&lt;/item&gt;

&lt;/root&gt;</pre>
        <p>
          Please write <code>&lt;name&gt;</code>, <code>&lt;identifier&gt;</code>,
          <code>&lt;autogen&gt;</code> under <code>&lt;item&gt;</code>.
        </p>

        <table class="table">
          <tbody>
            <tr>
              <th>
                &lt;name&gt;
                <br />
                &lt;appendix&gt;
              </th>
              <td>
                These values are used in Preference Pane.
              </td>
            </tr>
            <tr>
              <th>
                &lt;identifier&gt;
              </th>
              <td>
                This value is used to identify setting.
                <br />
                You need to specify a unique value.
                We recommend you to add a "private." prefix to your identifier.
                It prevents conflicts with identifiers of prepared settings.
              </td>
            </tr>
            <tr>
              <th>
                &lt;autogen&gt;
              </th>
              <td>
                Definition of this setting behavior.
                <br />
                For example, __KeyToKey__, __PointingButtonToKey__.
              </td>
            </tr>
          </tbody>
        </table>

        <h2 id="keycode-list">List of KeyCode, ConsumerKeyCode, PointingButton</h2>
        <ul>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/bridge/generator/keycode/data/KeyCode.data">List of KeyCode.</a>
          </li>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/bridge/generator/keycode/data/ModifierFlag.data">List of ModifierFlag.</a>
          </li>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/bridge/generator/keycode/data/ConsumerKeyCode.data">List of ConsumerKeyCode (Brightness Control, Audio Volume Control, Music Control, etc).</a>
          </li>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/bridge/generator/keycode/data/PointingButton.data">List of PointingButton.</a>
          </li>
        </ul>

        <h2 id="keytokey-syntax">__KeyToKey__ syntax</h2>

        <h3>Plain</h3>
        <p>
          This <code>&lt;autogen&gt;</code> changes space key to tab key.
        </p>
<pre class="prettyprint lang-xml">&lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::TAB&lt;/autogen&gt;</pre>
        <h3>Modifier+Key to Key</h3>
        <p>
          This <code>&lt;autogen&gt;</code> changes "left control+space key" to tab key.
        </p>
<pre class="prettyprint lang-xml">&lt;autogen&gt;
  __KeyToKey__
  KeyCode::SPACE, ModifierFlag::CONTROL_L,
  KeyCode::TAB
&lt;/autogen&gt;</pre>
        <h3>Modifier+Key to Modifier+Key</h3>
        <p>
          This <code>&lt;autogen&gt;</code> changes "left control+space key" to "left control+tab key".
        </p>
<pre class="prettyprint lang-xml">&lt;autogen&gt;
  __KeyToKey__
  KeyCode::SPACE, ModifierFlag::CONTROL_L,
  KeyCode::TAB,   ModifierFlag::CONTROL_L
&lt;/autogen&gt;</pre>
        <h3>Multiple modifiers</h3>
        <p>
          You can use "|" to specify multiple modifiers.
        </p>
        <p>
          This <code>&lt;autogen&gt;</code> changes "left control+fn+space key" to tab key.
        </p>
<pre class="prettyprint lang-xml">&lt;autogen&gt;
  __KeyToKey__
  KeyCode::SPACE, ModifierFlag::CONTROL_L | ModifierFlag::FN,
  KeyCode::TAB
&lt;/autogen&gt;</pre>
        <h3>ModifierFlag::NONE</h3>
        <p>
          If you want to change key behavior only when specific modifiers are pressed, use ModifierFlag::NONE.
        </p>
        <p>
          This <code>&lt;autogen&gt;</code> changes "fn+space key" to tab key and retain other modifier combinations+space key behavior.
        </p>
        <div class="row">
          <div class="col-lg-6">
            <table class="table">
              <thead>
                <tr>
                  <th>Physical key</th>
                  <th>Changed key</th>
                  <th>State</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>space</td>
                  <td>space</td>
                  <td>
                    <span class="label label-default">Not changed</span>
                  </td>
                </tr>
                <tr>
                  <td>control+space</td>
                  <td>control+space</td>
                  <td>
                    <span class="label label-default">Not changed</span>
                  </td>
                </tr>
                <tr>
                  <td>fn+space</td>
                  <td>tab</td>
                  <td>
                    <span class="label label-info">Changed</span>
                  </td>
                </tr>
                <tr>
                  <td>fn+control+space</td>
                  <td>fn+control+space</td>
                  <td>
                    <span class="label label-default">Not changed</span>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>

<pre class="prettyprint lang-xml">&lt;autogen&gt;
  __KeyToKey__
  KeyCode::SPACE, ModifierFlag::FN | ModifierFlag::NONE,
  KeyCode::TAB
&lt;/autogen&gt;</pre>
        <h3>Change to multiple keys</h3>
        <p>
          This <code>&lt;autogen&gt;</code> changes space key to tab,return key.
        </p>
<pre class="prettyprint lang-xml">&lt;autogen&gt;
  __KeyToKey__
  KeyCode::SPACE,
  KeyCode::TAB, KeyCode::RETURN
&lt;/autogen&gt;</pre>
        <h2 id="order">Order of &lt;autogen&gt;</h2>

        <h3>Basic case</h3>
        <p>
          Karabiner applies only the first matched <code>&lt;autogen&gt;</code>.
        </p>
        <p>
          The following autogens change space key to tab key (not return key).
        </p>
<pre class="prettyprint lang-xml">&lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::TAB&lt;/autogen&gt;
&lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::RETURN&lt;/autogen&gt;</pre>
        <h3>More complex case</h3>
        <p>
          If you want to change "shift+space to tab" and "space to return",
          you need to order <code>&lt;autogen&gt;</code> as follows.
        </p>
        <div class="row">
          <div class="col-lg-6">
            <table class="table">
              <thead>
                <tr>
                  <th>Physical key</th>
                  <th>Changed key</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>shift+space</td>
                  <td>tab</td>
                </tr>
                <tr>
                  <td>space</td>
                  <td>return</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
<pre class="prettyprint lang-xml">&lt;!-- shift+space to tab --&gt;
&lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, ModifierFlag::SHIFT_L, KeyCode::TAB&lt;/autogen&gt;

&lt;!-- space to return --&gt;
&lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::RETURN&lt;/autogen&gt;</pre>
        <p>
          <span class="label label-warning">Wrong case</span>
          If you've put them in reverse order, Karabiner changes "shift+space" to "shift+return".
        </p>

        <p>
        </p>
<pre class="prettyprint lang-xml">&lt;!-- Karabiner always changes space key to return key even if you're pressing shift modifier. --&gt;
&lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::RETURN&lt;/autogen&gt;

&lt;!-- *** This autogen is never applied. *** --&gt;
&lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, ModifierFlag::SHIFT_L, KeyCode::TAB&lt;/autogen&gt;</pre>
        <h2 id="identifier">Type of identifier prefix</h2>

        <p>
          You can add a special behavior by using some prefix on &lt;identifier&gt;.
        </p>

        <table class="table">
          <thead>
            <tr>
              <th>
                Prefix
              </th>
              <th>
                Behavior
              </th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>
                notsave.
              </td>
              <td>
                "notsave." prefix is designed for creating "mode".
                <ul>
                  <li>This setting is not saved even if it was enabled.</li>
                  <li>This setting priority is higher than normal settings.</li>
                  <li>User cannot enable this setting by Preference. (Use KeyCode::VK_CONFIG_*.)</li>
                </ul>
              </td>
            </tr>
          </tbody>
        </table>
      </section>

      <section>
        <div class="page-header">
          <h1 id="filter-overview">Filter: Overview</h1>
        </div>
        <p>
          You can define settings which are effective in specific conditions. <br />
          For example:
        </p>
        <ul>
          <li>Change keys in some apps.</li>
          <li>Change keys in some devices.</li>
          <li>Change keys in some input sources.</li>
          <li>Change keys if specified configuration is enabled.</li>
        </ul>

        <p>
          You can see all filters and examples in <a href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/include/checkbox/samples/filters.xml">filters.xml</a>.
          (You can try them by searching "developer filters" in Preferences.)
        </p>
        <div class="row">
          <div class="col-lg-4">
<a data-toggle="modal" href="#lightbox-3" class="thumbnail">
  <img src="img/karabiner-filter-examples@2x.png" alt="filter-examples" />
</a>
<div class="modal fade" id="lightbox-3" tabindex="30003">
  <div class="modal-dialog clickable" style="width: 728px;">
    <div class="modal-content">
      <div class="modal-body">
        <img src="img/karabiner-filter-examples@2x.png" alt="filter-examples" style="width: 100%" />
      </div>
    </div>
  </div>
</div>
          </div>
        </div>

        <h2>Basic usage</h2>

        <p>
          Put filters into <code>&lt;item&gt;</code>.
          If multiple filters are specified, <code>&lt;autogen&gt;</code> will be effective if all conditions are true.
        </p>

<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;item&gt;
    &lt;name&gt;Swap space key and tab key&lt;/name&gt;
    &lt;identifier&gt;private.filters_example&lt;/identifier&gt;

    &lt;!--
      Swap keys in Safari, Firefox or Google Chrome if you are using Apple keyboards.
    --&gt;

    &lt;only&gt;SAFARI, FIREFOX, GOOGLE_CHROME&lt;/only&gt;

    &lt;device_only&gt;DeviceVendor::APPLE_COMPUTER, DeviceProduct::ANY&lt;/device_only&gt;

    &lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::TAB&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::TAB, KeyCode::SPACE&lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>
        <h2>Narrow filters</h2>

        <p>
          Filters are applied to all <code>&lt;autogen&gt;</code> that are same level nodes or children nodes. <br />
          If you want to narrow filters, please use <code>&lt;block&gt;</code>.
        </p>

<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;item&gt;
    &lt;name&gt;Change numeric keys to keypad.&lt;/name&gt;
    &lt;appendix&gt;+ Change space key to left click in Safari.&lt;/appendix&gt;
    &lt;identifier&gt;private.filter_block_example&lt;/identifier&gt;

    &lt;autogen&gt;__KeyToKey__ KeyCode::KEY_0, KeyCode::KEYPAD_0&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::KEY_1, KeyCode::KEYPAD_1&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::KEY_2, KeyCode::KEYPAD_2&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::KEY_3, KeyCode::KEYPAD_3&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::KEY_4, KeyCode::KEYPAD_4&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::KEY_5, KeyCode::KEYPAD_5&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::KEY_6, KeyCode::KEYPAD_6&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::KEY_7, KeyCode::KEYPAD_7&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::KEY_8, KeyCode::KEYPAD_8&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::KEY_9, KeyCode::KEYPAD_9&lt;/autogen&gt;

    &lt;block&gt;
      &lt;!-- This filter will not be applied to parent autogens. --&gt;
      &lt;only&gt;SAFARI&lt;/only&gt;
      &lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, PointingButton::LEFT&lt;/autogen&gt;
    &lt;/block&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>      </section>

      <section>
        <div class="page-header">
          <h1 id="appdef">Filter: Specify application</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can define settings which are effective in specific applications only.
          <br />
          Add <code>&lt;only&gt;</code> or <code>&lt;not&gt;</code> to your <code>&lt;item&gt;</code>.
        </p>
        <p>
          This private.xml exchanges space key and tab key in Safari and Google Chrome.
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;item&gt;
    &lt;name&gt;Swap Space and Tab&lt;/name&gt;
    &lt;identifier&gt;private.app_safari_swap_space_and_tab&lt;/identifier&gt;

    &lt;only&gt;SAFARI, GOOGLE_CHROME&lt;/only&gt;

    &lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::TAB&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::TAB, KeyCode::SPACE&lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>
        <h2 id="appdef-steps">Steps to define an application specific setting</h2>
        <h3>
          Examine a bundle identifier of target application
        </h3>
        <ol class="steps">
          <li>
            <p>
              Launch EventViewer from a menu.
            </p>
            <p>
              <img
              alt="menu"
src="img/eventviewer-menu@2x.png" width="460" height="163"              />
            </p>
          </li>
          <li>
            <p>
              See "App" tab of EventViewer.
              <br />
              This list is updated when you changed the current application.
            </p>
            <p>
              Change the current application to target application. Then press "copy to pasteboard" button.
              <br />
              You can paste this information to text area.
            </p>

            <div class="row">
              <div class="col-lg-4">
<a data-toggle="modal" href="#lightbox-4" class="thumbnail">
  <img src="img/eventviewer-app@2x.png" alt="eventviewer-app" />
</a>
<div class="modal fade" id="lightbox-4" tabindex="30004">
  <div class="modal-dialog clickable" style="width: 934px;">
    <div class="modal-content">
      <div class="modal-body">
        <img src="img/eventviewer-app@2x.png" alt="eventviewer-app" style="width: 100%" />
      </div>
    </div>
  </div>
</div>
              </div>
            </div>
          </li>
        </ol>

        <h3>Add an application definition to your private.xml.</h3>
        <ol class="steps">
          <li>
            Add <code>&lt;appdef&gt;</code> to your private.xml.
            <br />
            <code>&lt;appname&gt;</code> is a name of application which you use in <code>&lt;only&gt;</code> filter.
            <br />
            Write the bundle identifier into <code>&lt;equal&gt;</code>.
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;appdef&gt;
    &lt;appname&gt;APPSTORE&lt;/appname&gt;
    &lt;equal&gt;com.apple.appstore&lt;/equal&gt;
  &lt;/appdef&gt;
&lt;/root&gt;</pre>          </li>
          <li>
            Then, you can use <code>&lt;only&gt;APPSTORE&lt;/only&gt;</code> in private.xml.
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;appdef&gt;
    &lt;appname&gt;APPSTORE&lt;/appname&gt;
    &lt;equal&gt;com.apple.appstore&lt;/equal&gt;
  &lt;/appdef&gt;

  &lt;item&gt;
    &lt;name&gt;Space to Tab in App Store.app&lt;/name&gt;
    &lt;identifier&gt;private.appdef&lt;/identifier&gt;
    &lt;only&gt;APPSTORE&lt;/only&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::TAB&lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>          </li>
        </ol>

        <h2 id="multiple-appdef">Multiple apps</h2>
        <p>
          You can specify multiple apps by a comma separated list. <br />
          For example, <code>&lt;only&gt;GOOGLE_CHROME, FIREFOX, SAFARI&lt;/only&gt;</code> means "Google Chrome or Firefox or Safari".
        </p>

        <h2 id="appdef-syntax">appdef syntax</h2>
        <p>
          You have to put one <code>&lt;appname&gt;</code> into <code>&lt;appdef&gt;</code>.<br />
          And you can put multiple <code>&lt;equal&gt;</code>, <code>&lt;prefix&gt;</code> and <code>&lt;suffix&gt;</code>.
        </p>
        <table class="table">
          <tbody>
            <tr>
              <th>
                &lt;appname&gt;
              </th>
              <td>
                This value is used in <code>&lt;only&gt;</code> and <code>&lt;not&gt;</code> filters.
              </td>
            </tr>
            <tr>
              <th>
                &lt;equal&gt;
              </th>
              <td>
                Specify an entire bundle identifier.
              </td>
            </tr>
            <tr>
              <th>
                &lt;prefix&gt;<br />
                &lt;suffix&gt;
              </th>
              <td>
                Specify a prefix/suffix of bundle identifier. <br />
                For example, <code>&lt;prefix&gt;org.pqrs.&lt;/prefix&gt;</code> matches any bundle identifiers that start with "org.pqrs.". (eg. org.pqrs.Karabiner, org.pqrs.Seil)
              </td>
            </tr>
          </tbody>
        </table>

        <p>
          Multiple &lt;equal&gt;, &lt;prefix&gt; and &lt;suffix&gt; are joined by 'OR'. <br />
          For example, the following appdef will be matched "org.pqrs.aaa" or "org.pqrs.bbb" or "org.pqrs.ccc.*" or "*.local".
        </p>

<pre class="prettyprint lang-xml">&lt;appdef&gt;
  &lt;appname&gt;PQRS&lt;/appname&gt;
  &lt;equal&gt;org.pqrs.aaa&lt;/equal&gt;
  &lt;equal&gt;org.pqrs.bbb&lt;/equal&gt;
  &lt;prefix&gt;org.pqrs.ccc.&lt;/prefix&gt;
  &lt;suffix&gt;.local&lt;/suffix&gt;
&lt;/appdef&gt;</pre>
        <h2 id="prepared-appdef">Prepared application definitions</h2>
        <p>
          Karabiner provides
          <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/appdef.xml">various application definitions</a>.
          <br />
          You can use them without <code>&lt;appdef&gt;</code> in private.xml.
        </p>
        <p>
          You can also overwrite existent application definitions by private.xml.
          <br />
          If you overwrite TERMINAL definition as follows,
          <code>&lt;only&gt;TERMINAL&lt;/only&gt;</code> is effective in Apple's Terminal.app only
          (not iTerm2 and other terminal apps).
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;appdef&gt;
    &lt;appname&gt;TERMINAL&lt;/appname&gt;
    &lt;equal&gt;com.apple.Terminal&lt;/equal&gt;
  &lt;/appdef&gt;
&lt;/root&gt;</pre>      </section>

      <section>
        <div class="page-header">
          <h1 id="windownamedef">Filter: Specify window name (window title)</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can define settings which are effective in specific window name only.
          <br />
          Add <code>&lt;windowname_only&gt;</code> or <code>&lt;windowname_not&gt;</code> to your <code>&lt;item&gt;</code>.
        </p>
        <p>
          This private.xml disables command-w in Gmail on Google Chrome.
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;item&gt;
    &lt;name&gt;Disable command-w in Gmail on Google Chrome.&lt;/name&gt;
    &lt;identifier&gt;private.windowname_google_chrome_gmail_disable_close&lt;/identifier&gt;
    &lt;only&gt;GOOGLE_CHROME&lt;/only&gt;

    &lt;windowname_only&gt;Gmail&lt;/windowname_only&gt;

    &lt;autogen&gt;
      __KeyToKey__
      KeyCode::W, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND | ModifierFlag::NONE,
      KeyCode::VK_NONE,
    &lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>
        <h2 id="windownamedef-steps">Steps to define an window name specific setting</h2>
        <h3>
          Examine window name
        </h3>
        <ol class="steps">
          <li>
            <p>
              Launch EventViewer from a menu.
            </p>
            <p>
              <img
              alt="menu"
src="img/eventviewer-menu@2x.png" width="460" height="163"              />
            </p>
          </li>
          <li>
            <p>
              See "App" tab of EventViewer.
              <br />
              This list is updated when a window name is changed.
            </p>
            <div class="alert alert-warning">
              Note: The window name detection does not work properly in some apps. (eg. Safari.)
            </div>
            <p>
              Focus target window. Then press "copy to pasteboard" button.
              <br />
              You can paste this information to text area.
            </p>

            <div class="row">
              <div class="col-lg-4">
<a data-toggle="modal" href="#lightbox-5" class="thumbnail">
  <img src="img/eventviewer-app@2x.png" alt="eventviewer-app" />
</a>
<div class="modal fade" id="lightbox-5" tabindex="30005">
  <div class="modal-dialog clickable" style="width: 934px;">
    <div class="modal-content">
      <div class="modal-body">
        <img src="img/eventviewer-app@2x.png" alt="eventviewer-app" style="width: 100%" />
      </div>
    </div>
  </div>
</div>
              </div>
            </div>
          </li>
        </ol>

        <h3>Add an window name definition to your private.xml.</h3>
        <ol class="steps">
          <li>
            Add <code>&lt;windownamedef&gt;</code> to your private.xml.
            <br />
            <code>&lt;name&gt;</code> is a name of definition which you use in <code>&lt;windowname_only&gt;</code> filter.
            <br />
            Write regular expressions pattern into <code>&lt;regex&gt;</code>.
            <a href="http://www.cplusplus.com/reference/regex/ECMAScript/" target="_blank">(regex patterns follow the ECMAScript syntax.)</a>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;windownamedef&gt;
    &lt;name&gt;Google_Search&lt;/name&gt;
    &lt;regex&gt; - Google Search$&lt;/regex&gt;
  &lt;/windownamedef&gt;
&lt;/root&gt;</pre>          </li>
          <li>
            Then, you can use <code>&lt;windowname_only&gt;Google_Search&lt;/windowname_only&gt;</code> in private.xml.
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;windownamedef&gt;
    &lt;name&gt;Google_Search&lt;/name&gt;
    &lt;regex&gt; - Google Search$&lt;/regex&gt;
  &lt;/windownamedef&gt;

  &lt;item&gt;
    &lt;name&gt;Disable command-w in Google Search on Google Chrome.&lt;/name&gt;
    &lt;identifier&gt;private.windownamedef&lt;/identifier&gt;
    &lt;windowname_only&gt;Google_Search&lt;/windowname_only&gt;
    &lt;autogen&gt;
      __KeyToKey__
      KeyCode::W, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND | ModifierFlag::NONE,
      KeyCode::VK_NONE,
    &lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>          </li>
        </ol>

        <h2 id="prepared-windownamedef">Prepared window name definitions</h2>
        <p>
          Karabiner provides
          <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/windownamedef.xml">various window name definitions</a>.
          <br />
          You can use them without <code>&lt;windownamedef&gt;</code> in private.xml.
        </p>
        <p>
          You can also overwrite existent window name definitions by private.xml.
        </p>
      </section>

      <section>
        <div class="page-header">
          <h1 id="uielementroledef">Filter: Specify ui element role</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can define settings which are effective in specific ui element role only.
          <br />
          It's useful when you want to make settings which are effective only if the focused element is text area (text field).
        </p>
        <p>
          Add <code>&lt;uielementrole_only&gt;</code> or <code>&lt;uielementrole_not&gt;</code> to your <code>&lt;item&gt;</code>.
        </p>
        <p>
          This private.xml changes hjkl keys to arrow keys in Finder. <br />
          And hjkl keys will not be modified if you are editing a file name.
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;item&gt;
    &lt;name&gt;Change hjkl keys to arrow keys in Finder&lt;/name&gt;
    &lt;identifier&gt;private.hjkl_keys_to_arrow_keys_in_finder&lt;/identifier&gt;

    &lt;uielementrole_not&gt;AXTextArea, AXTextField&lt;/uielementrole_not&gt;

    &lt;only&gt;FINDER&lt;/only&gt;
    &lt;modifier_only&gt;
      ModifierFlag::NONE,
      ModifierFlag::SHIFT_L | ModifierFlag::NONE,
      ModifierFlag::SHIFT_R | ModifierFlag::NONE,
    &lt;/modifier_only&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::H, KeyCode::CURSOR_LEFT&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::J, KeyCode::CURSOR_DOWN&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::K, KeyCode::CURSOR_UP&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::L, KeyCode::CURSOR_RIGHT&lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>
        <h2 id="confirm-uielementrole">Confirm ui element role</h2>
        <p>
          You can confirm a focused ui element's role by EventViewer.
        </p>
        <div class="row">
          <div class="col-lg-4">
<a data-toggle="modal" href="#lightbox-6" class="thumbnail">
  <img src="img/eventviewer-app@2x.png" alt="eventviewer-app" />
</a>
<div class="modal fade" id="lightbox-6" tabindex="30006">
  <div class="modal-dialog clickable" style="width: 934px;">
    <div class="modal-content">
      <div class="modal-body">
        <img src="img/eventviewer-app@2x.png" alt="eventviewer-app" style="width: 100%" />
      </div>
    </div>
  </div>
</div>
          </div>
        </div>

        <h2 id="prepared-uielementroledef">Prepared ui element role definitions</h2>
        <p>
          Karabiner provides
          <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/uielementroledef.xml">various ui element role definitions</a>.
        </p>
        <p>
          You can also add your own ui element role by &lt;uielementroledef&gt; tag.
        </p>
      </section>

      <section>
        <div class="page-header">
          <h1 id="devicedef">Filter: Specify device</h1>
        </div>

        <p>
          You can define settings which are effective on specific device only.
          <br />
          Add <code>&lt;device_only&gt;</code> or <code>&lt;device_not&gt;</code> to your <code>&lt;item&gt;</code>.
        </p>
        <p>
          This private.xml turns scroll wheel off on Magic Mouse.
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;item&gt;
    &lt;name&gt;Disable ScrollWheel on Magic Mouse&lt;/name&gt;
    &lt;identifier&gt;private.dropscrollwheel_0x05ac_0x030d&lt;/identifier&gt;

    &lt;device_only&gt;DeviceVendor::APPLE_COMPUTER,DeviceProduct::MAGIC_MOUSE&lt;/device_only&gt;

    &lt;autogen&gt;__DropScrollWheel__&lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>
        <h2 id="devicedef-steps">Steps to define a device specific setting</h2>

        <h3>Examine Vendor ID and Product ID of a target device</h3>
        <ol class="steps">
          <li>
            <p>
              Launch EventViewer from a menu.
            </p>
            <p>
              <img
              alt="menu"
src="img/eventviewer-menu@2x.png" width="460" height="163"              />
            </p>
          </li>
          <li>
            <p>
              See "Devices" tab of EventViewer.
            </p>
            <p>
              Then press "copy to pasteboard" button.
              <br />
              You can paste this information to text area.
            </p>

            <div class="row">
              <div class="col-lg-4">
<a data-toggle="modal" href="#lightbox-7" class="thumbnail">
  <img src="img/eventviewer-devices@2x.png" alt="eventviewer-devices" />
</a>
<div class="modal fade" id="lightbox-7" tabindex="30007">
  <div class="modal-dialog clickable" style="width: 934px;">
    <div class="modal-content">
      <div class="modal-body">
        <img src="img/eventviewer-devices@2x.png" alt="eventviewer-devices" style="width: 100%" />
      </div>
    </div>
  </div>
</div>
              </div>
            </div>
          </li>
        </ol>

        <h3>Add an device definition to your private.xml</h3>
        <ol class="steps">
          <li>
            Add <code>&lt;devicevendordef&gt;</code> and <code>&lt;deviceproductdef&gt;</code> to your private.xml.
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;devicevendordef&gt;
    &lt;vendorname&gt;HEWLETT_PACKARD&lt;/vendorname&gt;
    &lt;vendorid&gt;0x03f0&lt;/vendorid&gt;
  &lt;/devicevendordef&gt;

  &lt;deviceproductdef&gt;
    &lt;productname&gt;MY_HP_KEYBOARD&lt;/productname&gt;
    &lt;productid&gt;0x0224&lt;/productid&gt;
  &lt;/deviceproductdef&gt;
&lt;/root&gt;</pre>          </li>
          <li>
            Then, you can use <code>&lt;device_only&gt;</code> in private.xml.
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;devicevendordef&gt;
    &lt;vendorname&gt;HEWLETT_PACKARD&lt;/vendorname&gt;
    &lt;vendorid&gt;0x03f0&lt;/vendorid&gt;
  &lt;/devicevendordef&gt;

  &lt;deviceproductdef&gt;
    &lt;productname&gt;MY_HP_KEYBOARD&lt;/productname&gt;
    &lt;productid&gt;0x0224&lt;/productid&gt;
  &lt;/deviceproductdef&gt;

  &lt;item&gt;
    &lt;name&gt;Space to Tab in MY_HP_KEYBOARD&lt;/name&gt;
    &lt;identifier&gt;private.deviceproductdef&lt;/identifier&gt;
    &lt;device_only&gt;DeviceVendor::HEWLETT_PACKARD, DeviceProduct::MY_HP_KEYBOARD&lt;/device_only&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::TAB&lt;/autogen&gt;
  &lt;/item&gt;

&lt;/root&gt;</pre>          </li>
        </ol>

        <h2 id="device-rawvalue">Using RawValue</h2>
        <p>
          You can also use RawValue to specify Vendor ID and Product ID.
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;

  &lt;item&gt;
    &lt;name&gt;Space to Tab in MY_HP_KEYBOARD&lt;/name&gt;
    &lt;identifier&gt;private.deviceproductdef_rawvalue&lt;/identifier&gt;
    &lt;device_only&gt;DeviceVendor::RawValue::0x03f0, DeviceProduct::RawValue::0x0224&lt;/device_only&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::TAB&lt;/autogen&gt;
  &lt;/item&gt;

&lt;/root&gt;</pre>
        <h2 id="multiple-devicedef">Multiple devices</h2>
        <p>
          You can specify multiple devices by a comma separated list. <br />
          For example, the following &lt;device_only&gt; means "Magic Mouse or Logitech Unifying".
        </p>
<pre class="prettyprint lang-xml">  &lt;device_only&gt;
    DeviceVendor::APPLE_COMPUTER, DeviceProduct::MAGIC_MOUSE,
    DeviceVendor::LOGITECH, DeviceProduct::LOGITECH_UNIFYING_0xc52b,
  &lt;/device_only&gt;</pre>
        <h2 id="prepared-devicedef">Prepared device definitions</h2>
        <p>
          Karabiner provides various Vendor ID and Product ID definitions.
          <br />
          You can use them without <code>&lt;devicevendordef&gt;</code> and
          <code>&lt;deviceproductdef&gt;</code> in private.xml.
        </p>
        <ul>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/devicevendordef.xml">List of prepared Vendor ID</a>
          </li>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/deviceproductdef.xml">List of prepared Product ID</a>
          </li>
        </ul>
        <p>
          You can also overwrite existent device definitions by private.xml.
        </p>

        <h2 id="locationid">How to distinguish multiple devices which have same Vendor ID and Product ID</h2>
        <p>
          You can use "Location ID" in order to distinguish multiple devices which have same Vendor ID and Product ID.
        </p>
        <h3>Learn about "Location ID"</h3>
        <ul>
          <li>"Location ID" is an unique identifier even if devices have same Vendor ID and Product ID.</li>
          <li>The behavior of "Location ID" is different for each type of device.</li>
        </ul>
        <table class="table">
          <tbody>
            <tr>
              <th>
                Device Type
              </th>
              <th>
                What's Location ID?
              </th>
              <th>
                Is immutable?
              </th>
            </tr>
            <tr>
              <td>
                USB Device
              </td>
              <td>
                Location ID is determined by USB port.
              </td>
              <td>
                This value will be changed when you pull out USB device and plug it into other USB port.
              </td>
            </tr>
            <tr>
              <td>
                Bluetooth Device
              </td>
              <td>
                Location ID is determined by Bluetooth Address.
              </td>
              <td>
                This value is immutable.
              </td>
            </tr>
          </tbody>
        </table>

        <h3>Examine Location ID</h3>
        <p>
          You can examin Location ID by <a href="document.html.ja#eventviewer">EventViewer</a>.
        </p>

        <div class="row">
          <div class="col-lg-4">
<a data-toggle="modal" href="#lightbox-8" class="thumbnail">
  <img src="img/eventviewer-locationid@2x.png" alt="Location ID" />
</a>
<div class="modal fade" id="lightbox-8" tabindex="30008">
  <div class="modal-dialog clickable" style="width: 934px;">
    <div class="modal-content">
      <div class="modal-body">
        <img src="img/eventviewer-locationid@2x.png" alt="Location ID" style="width: 100%" />
      </div>
    </div>
  </div>
</div>
          </div>
        </div>

        <h3>Location ID in XML</h3>
        <p>
          You can specify Location ID like this.
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;devicevendordef&gt;
    &lt;vendorname&gt;HEWLETT_PACKARD&lt;/vendorname&gt;
    &lt;vendorid&gt;0x03f0&lt;/vendorid&gt;
  &lt;/devicevendordef&gt;

  &lt;deviceproductdef&gt;
    &lt;productname&gt;MY_HP_KEYBOARD&lt;/productname&gt;
    &lt;productid&gt;0x0224&lt;/productid&gt;
  &lt;/deviceproductdef&gt;

  &lt;devicelocationdef&gt;
    &lt;locationname&gt;MY_HP_KEYBOARD_PRIMARY&lt;/locationname&gt;
    &lt;locationid&gt;0xfa120000&lt;/locationid&gt;
  &lt;/devicelocationdef&gt;

  &lt;item&gt;
    &lt;name&gt;Space to Tab in MY_HP_KEYBOARD&lt;/name&gt;
    &lt;identifier&gt;private.deviceproductdef&lt;/identifier&gt;
    &lt;device_only&gt;
      DeviceVendor::HEWLETT_PACKARD,
      DeviceProduct::MY_HP_KEYBOARD,
      DeviceLocation::MY_HP_KEYBOARD_PRIMARY,
    &lt;/device_only&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::TAB&lt;/autogen&gt;
  &lt;/item&gt;

&lt;/root&gt;</pre>      </section>

      <section>
        <div class="page-header">
          <h1 id="inputsourcedef">Filter: Specify input source</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can define settings which are effective in specific input source only.
          <br />
          Add <code>&lt;inputsource_only&gt;</code> or <code>&lt;inputsource_not&gt;</code> to your <code>&lt;item&gt;</code>.
        </p>
        <p>
          This private.xml exchanges space key and tab key on Dvorak.
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;inputsourcedef&gt;
    &lt;name&gt;MY_DVORAK&lt;/name&gt;
    &lt;inputsourceid_prefix&gt;com.apple.keylayout.Dvorak&lt;/inputsourceid_prefix&gt;
  &lt;/inputsourcedef&gt;

  &lt;item&gt;
    &lt;name&gt;Swap Space and Tab&lt;/name&gt;
    &lt;identifier&gt;private.my_dvorak_swap_space_and_tab&lt;/identifier&gt;

    &lt;inputsource_only&gt;MY_DVORAK&lt;/inputsource_only&gt;

    &lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::TAB&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::TAB, KeyCode::SPACE&lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>
        <h2>Steps</h2>
        <ol class="steps">
          <li>
            <p>
              Examine Input Source ID of target input source.
              <br />
              <a href="#inputsourceid">How to examine input source id.</a>
            </p>
          </li>
          <li>
            <p>
              Add <code>&lt;inputsourcedef&gt;</code> your private.xml.
            </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;inputsourcedef&gt;
    &lt;name&gt;MY_DVORAK&lt;/name&gt;
    &lt;inputsourceid_prefix&gt;com.apple.keylayout.Dvorak&lt;/inputsourceid_prefix&gt;
  &lt;/inputsourcedef&gt;
&lt;/root&gt;</pre>          </li>
          <li>
            <p>
              Then, you can use <code>&lt;inputsource_only&gt;</code> and <code>&lt;inputsource_not&gt;</code> in private.xml.
            </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;inputsourcedef&gt;
    &lt;name&gt;MY_DVORAK&lt;/name&gt;
    &lt;inputsourceid_prefix&gt;com.apple.keylayout.Dvorak&lt;/inputsourceid_prefix&gt;
  &lt;/inputsourcedef&gt;

  &lt;item&gt;
    &lt;name&gt;Swap Space and Tab&lt;/name&gt;
    &lt;identifier&gt;private.my_dvorak_swap_space_and_tab&lt;/identifier&gt;
    &lt;inputsource_only&gt;MY_DVORAK&lt;/inputsource_only&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::TAB&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::TAB, KeyCode::SPACE&lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>          </li>
        </ol>

        <h2>Prepared input source definitions</h2>
        <p>
          Karabiner provides <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/inputsourcedef.xml">various input source definitions</a>.
          <br />
          You can use them without <code>&lt;inputsourcedef&gt;</code> in private.xml.
        </p>

        <h2 id="inputsourceid">How to examine input source id</h2>
        <p>
          You can examine input source id by Event Viewer.
        </p>
        <ol>
          <li>Launch <a href="document.html.ja#eventviewer">Event Viewer</a>.</li>
          <li>Switch input source into target input source.</li>
          <li>Switch input source into other input source.</li>
          <li>Again, switch input source into target input source.</li>
          <li>See <span class="label label-default">Input Source ID</span> in Event Viewer.</li>
        </ol>
        <div class="row">
          <div class="col-lg-4">
<a data-toggle="modal" href="#lightbox-9" class="thumbnail">
  <img src="img/eventviewer-inputsource@2x.png" alt="Event Viewer" />
</a>
<div class="modal fade" id="lightbox-9" tabindex="30009">
  <div class="modal-dialog clickable" style="width: 934px;">
    <div class="modal-content">
      <div class="modal-body">
        <img src="img/eventviewer-inputsource@2x.png" alt="Event Viewer" style="width: 100%" />
      </div>
    </div>
  </div>
</div>
          </div>
        </div>
      </section>

      <section>
        <div class="page-header">
          <h1 id="vkopenurldef">Launch app / Open URL / Execute shell commands</h1>
        </div>

        <h2>An example</h2>
        <p>
          This private.xml opens web site, launches calculator and executes a shell command "/bin/date | /usr/bin/pbcopy".
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;!-- generic URL --&gt;
  &lt;vkopenurldef&gt;
    &lt;name&gt;KeyCode::VK_OPEN_URL_WEB_karabiner&lt;/name&gt;
    &lt;url&gt;https://pqrs.org/osx/karabiner/&lt;/url&gt;
  &lt;/vkopenurldef&gt;

  &lt;!-- file path --&gt;
  &lt;vkopenurldef&gt;
    &lt;name&gt;KeyCode::VK_OPEN_URL_APP_Calculator&lt;/name&gt;
    &lt;url type="file"&gt;/Applications/Calculator.app&lt;/url&gt;
  &lt;/vkopenurldef&gt;

  &lt;!-- shell commands --&gt;
  &lt;vkopenurldef&gt;
    &lt;name&gt;KeyCode::VK_OPEN_URL_SHELL_date_pbcopy&lt;/name&gt;
    &lt;url type="shell"&gt;
      &lt;![CDATA[    /bin/date | /usr/bin/pbcopy    ]]&gt;
    &lt;/url&gt;
  &lt;/vkopenurldef&gt;

  &lt;item&gt;
    &lt;name&gt;Change right-command + w to open https://pqrs.org/osx/karabiner/&lt;/name&gt;
    &lt;identifier&gt;private.right_command_w&lt;/identifier&gt;
    &lt;autogen&gt;
      __KeyToKey__
      KeyCode::W, ModifierFlag::COMMAND_R,
      KeyCode::VK_OPEN_URL_WEB_karabiner,
    &lt;/autogen&gt;
  &lt;/item&gt;

  &lt;item&gt;
    &lt;name&gt;Change right-command + c to launch calculator&lt;/name&gt;
    &lt;identifier&gt;private.right_command_c&lt;/identifier&gt;
    &lt;autogen&gt;
      __KeyToKey__
      KeyCode::C, ModifierFlag::COMMAND_R,
      KeyCode::VK_OPEN_URL_APP_Calculator,
    &lt;/autogen&gt;
  &lt;/item&gt;

  &lt;item&gt;
    &lt;name&gt;Change right-command + d to execute /bin/date | /usr/bin/pbcopy&lt;/name&gt;
    &lt;identifier&gt;private.right_command_d&lt;/identifier&gt;
    &lt;autogen&gt;
      __KeyToKey__
      KeyCode::D, ModifierFlag::COMMAND_R,
      KeyCode::VK_OPEN_URL_SHELL_date_pbcopy,
    &lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>
        <h2>Virtual key code definition</h2>
        <p>
          You can define new virtual key code by <code>&lt;vkopenurldef&gt;</code>.
        </p>
        <ul>
          <li>
            <p>
              <code>&lt;name&gt;</code> is a name of virtual key code.
              This name must be started with <code>KeyCode::VK_OPEN_URL_</code>.
              <br />
              For example, <code>&lt;name&gt;KeyCode::VK_OPEN_URL_Yourapp&lt;/name&gt;</code>.
            </p>
          </li>
          <li>
            <p>
              <code>&lt;url&gt;</code> is a url of virtual key code.
              <br />
              &lt;url&gt; has a "type" attribute which determines how treat the value.
            </p>
            <table class="table">
              <tbody>
                <tr>
                  <th>Type attribute</th>
                  <th>Description</th>
                </tr>
                <tr>
                  <td>(empty)</td>
                  <td>If you does not specify a type attribute, it will be treated as a generic URL.</td>
                </tr>
                <tr>
                  <td>type="file"</td>
                  <td>The value will be treated as file path.</td>
                </tr>
                <tr>
                  <td>type="shell"</td>
                  <td>The value will be treated as shell commands.</td>
                </tr>
              </tbody>
            </table>
          </li>
          <li>
            <p>
              <code>&lt;background /&gt;</code> (optional)<br />
              If &lt;background /&gt; exists, URL will be opened in background.
            </p>
          </li>
        </ul>

        <h2>Prepared virtual key code definitions</h2>
        <p>
          Karabiner provides
          <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/vkopenurldef.xml">various virtual key code definitions</a>.
          <br />
          You can use them without <code>&lt;vkopenurldef&gt;</code> in private.xml.
        </p>
      </section>

      <section>
        <div class="page-header">
          <h1 id="vkchangeinputsourcedef">Change input source by virtual key code.</h1>
        </div>

        <h2>An example</h2>
        <p>
          This private.xml changes input source to Dvorak by <span class="label label-default">Right Shift Key + D</span>.
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;vkchangeinputsourcedef&gt;
    &lt;name&gt;KeyCode::VK_CHANGE_INPUTSOURCE_MY_DVORAK&lt;/name&gt;
    &lt;inputsourceid_equal&gt;com.apple.keylayout.Dvorak&lt;/inputsourceid_equal&gt;
  &lt;/vkchangeinputsourcedef&gt;

  &lt;item&gt;
    &lt;name&gt;Change input source to Dvorak by right shift key + D&lt;/name&gt;
    &lt;identifier&gt;private.change_input_source_to_dvorak&lt;/identifier&gt;
    &lt;autogen&gt;
      __KeyToKey__
      KeyCode::D, ModifierFlag::SHIFT_R,
      KeyCode::VK_CHANGE_INPUTSOURCE_MY_DVORAK
    &lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>
        <h2>Virtual key code definition</h2>
        <p>
          You can define new virtual key code by <code>&lt;vkchangeinputsourcedef&gt;</code>.
        </p>
        <ul>
          <li>
            <p>
              <code>&lt;name&gt;</code> is a name of virtual key code.
              This name must be started with <code>KeyCode::VK_CHANGE_INPUTSOURCE_</code>.
              <br />
              For example, <code>&lt;name&gt;KeyCode::VK_CHANGE_INPUTSOURCE_YOUR_LANGUAGE&lt;/name&gt;</code>.
            </p>
          </li>
          <li>
            <p>
              <code>&lt;inputsourceid_equal&gt;</code> is a input source id of target input source.
              <br />
              <a href="#inputsourceid">How to examine input source id.</a>
            </p>
          </li>
        </ul>

        <h3>Prepared virtual key code definitions</h3>
        <p>
          Karabiner provides
          <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/vkchangeinputsourcedef.xml">various virtual key code definitions</a>.
          <br />
          You can use them without <code>&lt;vkchangeinputsourcedef&gt;</code> in private.xml.
        </p>
      </section>

      <section>
        <div class="page-header">
          <h1 id="include">Include external XML</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can include external xml files by <code>&lt;include&gt;</code>.
        </p>

        <b>private.xml</b>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;include path="core.xml" /&gt;
&lt;/root&gt;</pre>
        <b>core.xml</b>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;item&gt;
    &lt;name&gt;Swap Space and Tab&lt;/name&gt;
    &lt;identifier&gt;private.swap_space_and_tab&lt;/identifier&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::TAB&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::TAB, KeyCode::SPACE&lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>
        <h2 id="dropbox">&lt;include&gt; with Dropbox</h2>
        <p>
          You can synchronize your private.xml by Dropbox or other file syncing service.
        </p>

        <b>private.xml</b>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;include path="{{ ENV_HOME }}/Dropbox/private/Karabiner/core.xml" /&gt;
&lt;/root&gt;</pre>
        <b>Dropbox/private/Karabiner/core.xml</b>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;item&gt;
    &lt;name&gt;Dropbox Test!&lt;/name&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>
        <h2 id="include-with-replacementdef">&lt;include&gt; with &lt;replacementdef&gt;</h2>
        <p>
          <code>&lt;replacementdef&gt;</code> in <code>&lt;include&gt;</code> has a local scope.
          These <code>&lt;replacementdef&gt;</code> are effective only in included file.
        </p>

        <b>private.xml</b>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;!-- Swap Space and Escape --&gt;
  &lt;include path="core.xml"&gt;
    &lt;replacementdef&gt;
      &lt;replacementname&gt;KEY1&lt;/replacementname&gt;
      &lt;replacementvalue&gt;KeyCode::SPACE&lt;/replacementvalue&gt;
    &lt;/replacementdef&gt;
    &lt;replacementdef&gt;
      &lt;replacementname&gt;KEY2&lt;/replacementname&gt;
      &lt;replacementvalue&gt;KeyCode::ESCAPE&lt;/replacementvalue&gt;
    &lt;/replacementdef&gt;
  &lt;/include&gt;

  &lt;!-- Swap Tab and Return --&gt;
  &lt;include path="core.xml"&gt;
    &lt;replacementdef&gt;
      &lt;replacementname&gt;KEY1&lt;/replacementname&gt;
      &lt;replacementvalue&gt;KeyCode::TAB&lt;/replacementvalue&gt;
    &lt;/replacementdef&gt;
    &lt;replacementdef&gt;
      &lt;replacementname&gt;KEY2&lt;/replacementname&gt;
      &lt;replacementvalue&gt;KeyCode::RETURN&lt;/replacementvalue&gt;
    &lt;/replacementdef&gt;
  &lt;/include&gt;
&lt;/root&gt;</pre>
        <b>core.xml</b>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;item&gt;
    &lt;name&gt;Swap {{ KEY1 }} and {{ KEY2 }}&lt;/name&gt;
    &lt;identifier&gt;private.swap_{{ KEY1 }}_{{ KEY2 }}&lt;/identifier&gt;
    &lt;autogen&gt;__KeyToKey__ {{ KEY1 }}, {{ KEY2 }}&lt;/autogen&gt;
    &lt;autogen&gt;__KeyToKey__ {{ KEY2 }}, {{ KEY1 }}&lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>
        <h2 id="include-once">once attribute</h2>
        <p>
          You can include specific files only once by <code>&lt;include&gt;</code> with <code>once</code> attribute.<br />
          For example, the core.xml will be included only once.
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;include once="true" path="core.xml" /&gt; &lt;!-- will be included. --&gt;
  &lt;include once="true" path="core.xml" /&gt; &lt;!-- will be ignored. --&gt;
&lt;/root&gt;</pre>
        <h3>mixture of once attribute</h3>
        <p>
          Karabiner remembers the included files by each <code>&lt;included&gt;</code> even if the <code>&lt;included&gt;</code> does not have <code>once</code> attribute.<br />
          And Karabiner will check the included files only when <code>once</code> attribute exists.
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;include             path="core.xml" /&gt; &lt;!-- will be included. --&gt;
  &lt;include once="true" path="core.xml" /&gt; &lt;!-- will be ignored. --&gt;
&lt;/root&gt;</pre>
        <p>
          If the second <code>&lt;include&gt;</code> does not have <code>once</code> attribute, the second <code>&lt;include&gt;</code> always includes the file.
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;include once="true" path="core.xml" /&gt; &lt;!-- will be included. --&gt;
  &lt;include             path="core.xml" /&gt; &lt;!-- will be included. --&gt;
&lt;/root&gt;</pre>
      </section>

      <section>
        <div class="page-header">
          <h1 id="replacementdef">String replacement</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can define replacement by <code>&lt;replacementdef&gt;</code>.
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;replacementdef&gt;
    &lt;replacementname&gt;MY_IGNORE_APPS&lt;/replacementname&gt;
    &lt;replacementvalue&gt;SAFARI, FIREFOX, FINDER&lt;/replacementvalue&gt;
  &lt;/replacementdef&gt;

  &lt;item&gt;
    &lt;name&gt;Change space to tab except in my ignore apps.&lt;/name&gt;
    &lt;identifier&gt;private.space_to_tab_except_my_ignore_apps&lt;/identifier&gt;
    &lt;not&gt;{{ MY_IGNORE_APPS }}&lt;/not&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::SPACE, KeyCode::TAB&lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>        <p>
          {{ &lt;replacementname&gt; }} is replaced by <code>&lt;replacementvalue&gt;</code>.
        </p>

<pre class="prettyprint lang-xml">&lt;not&gt;{{ MY_IGNORE_APPS }}&lt;/not&gt;

&lt;!-- ↑ is replaced to ↓ --&gt;

&lt;not&gt;SAFARI, FIREFOX, FINDER&lt;/not&gt;</pre>
        <h2>Global scope replacement</h2>
        <p>
          <code>&lt;replacementdef&gt;</code> written in private.xml has a global scope.
          It is effective for the entire XML.
        </p>
        <p>
          When you wrote multiple <code>&lt;replacementdef&gt;</code> for one <code>&lt;replacementname&gt;</code>,
          only the first one is effective.
        </p>

<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;replacementdef&gt;
    &lt;replacementname&gt;MY_KEYCODE&lt;/replacementname&gt;
    &lt;replacementvalue&gt;KeyCode::SPACE&lt;/replacementvalue&gt;
  &lt;/replacementdef&gt;

  &lt;!-- This replacementdef of MY_KEYCODE is ignored --&gt;
  &lt;replacementdef&gt;
    &lt;replacementname&gt;MY_KEYCODE&lt;/replacementname&gt;
    &lt;replacementvalue&gt;KeyCode::TAB&lt;/replacementvalue&gt;
  &lt;/replacementdef&gt;

  &lt;item&gt;
    &lt;name&gt;{{ MY_KEYCODE }} is KeyCode::SPACE&lt;/name&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>
        <h2>Local scope replacement</h2>
        <p>
          You can define a local scope replacement
          by using <code>&lt;replacementdef&gt;</code> under <code>&lt;include&gt;</code>.
          <br />
          See
          <a href="#include-with-replacementdef">&lt;include&gt; with &lt;replacementdef&gt;</a> section.
        </p>

        <h2>Prepared replacement definitions</h2>
        <p>
          Karabiner provides
          <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/replacementdef.xml">various replacement definitions</a>.
          <br />
          You can use them without <code>&lt;replacementdef&gt;</code> in private.xml.
        </p>
        <p>
          You can also overwrite existing replacement definitions by private.xml.
          <br />
          An example of overwriting VI_H:
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;replacementdef&gt;
    &lt;replacementname&gt;VI_H&lt;/replacementname&gt;
    &lt;replacementvalue&gt;KeyCode::J&lt;/replacementvalue&gt;
  &lt;/replacementdef&gt;
&lt;/root&gt;</pre>      </section>

      <section>
        <div class="page-header">
          <h1 id="keycode">New keycode definition</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can define new KeyCode by <code>&lt;symbol_map&gt;</code>.
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;symbol_map type="KeyCode" name="MY_LANGUAGE_KEY" value="0x32" /&gt;

  &lt;item&gt;
    &lt;name&gt;Change KeyCode::MY_LANGUAGE_KEY to tab.&lt;/name&gt;
    &lt;identifier&gt;private.my_language_key_to_tab&lt;/identifier&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::MY_LANGUAGE_KEY, KeyCode::TAB&lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>
        <h2 id="rawvalue">Specify a raw value</h2>
        <p>
          You can specify a raw value by using KeyCode::RawValue.
        </p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;item&gt;
    &lt;name&gt;Change right option key to tab key&lt;/name&gt;
    &lt;identifier&gt;private.right_option_key_to_tab_key&lt;/identifier&gt;
    &lt;!-- change right option key (0x3d) to tab key (0x30) --&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::RawValue::0x3d, KeyCode::RawValue::0x30&lt;/autogen&gt;
  &lt;/item&gt;
&lt;/root&gt;</pre>      </section>

      <section>
        <div class="page-header">
          <h1 id="modifier">New virtual modifier definition</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can define new virtual modifier by <code>&lt;modifierdef&gt;</code>.
        </p>
        <div class="alert alert-warning">
          Note: Added virtual modifiers are not shown in EventViewer.
        </div>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;modifierdef&gt;MY_HYPER&lt;/modifierdef&gt;
  &lt;modifierdef&gt;MY_SUPER&lt;/modifierdef&gt;

  &lt;item&gt;
    &lt;name&gt;My hyper and super key&lt;/name&gt;
    &lt;appendix&gt;* Change the right shift key to my hyper key.&lt;/appendix&gt;
    &lt;appendix&gt;* Change the right option key to my super key.&lt;/appendix&gt;
    &lt;appendix&gt;&lt;/appendix&gt;
    &lt;appendix&gt;* Change hyper+a,s to 1,2.&lt;/appendix&gt;
    &lt;appendix&gt;* Change super+a,s to brightness controls.&lt;/appendix&gt;
    &lt;identifier&gt;private.hyper_super&lt;/identifier&gt;

    &lt;!-- Change the right shift key to my hyper key. --&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::SHIFT_R, KeyCode::VK_MODIFIER_MY_HYPER&lt;/autogen&gt;
    &lt;!-- Change the right option key to my super key. --&gt;
    &lt;autogen&gt;__KeyToKey__ KeyCode::OPTION_R, KeyCode::VK_MODIFIER_MY_SUPER&lt;/autogen&gt;

    &lt;!-- hyper key settings --&gt;
    &lt;autogen&gt;
      __KeyToKey__
      KeyCode::A, ModifierFlag::MY_HYPER,
      KeyCode::KEY_1,
    &lt;/autogen&gt;
    &lt;autogen&gt;
      __KeyToKey__
      KeyCode::S, ModifierFlag::MY_HYPER,
      KeyCode::KEY_2,
    &lt;/autogen&gt;

    &lt;!-- super key settings --&gt;
    &lt;autogen&gt;
      __KeyToKey__
      KeyCode::A, ModifierFlag::MY_SUPER,
      ConsumerKeyCode::BRIGHTNESS_DOWN,
    &lt;/autogen&gt;
    &lt;autogen&gt;
      __KeyToKey__
      KeyCode::S, ModifierFlag::MY_SUPER,
      ConsumerKeyCode::BRIGHTNESS_UP,
    &lt;/autogen&gt;

  &lt;/item&gt;
&lt;/root&gt;</pre>
        <h2>Added KeyCode and ModifierFlag by &lt;modifierdef&gt;</h2>
        <p>
          <code>&lt;modifierdef&gt;</code> adds some KeyCode and ModifierFlag.<br />
          For generic usage, <code>ModifierFlag::MY_HYPER</code> and <code>KeyCode::VK_MODIFIER_MY_HYPER</code> are important.<br />
          (Replace MY_HYPER with your own modifier's name.)
        </p>
        <p>
          These are full KeyCode and ModifierFlag that added by <code>&lt;modifierdef&gt;MY_HYPER&lt;/modifierdef&gt;:</code>
        </p>
        <table class="table">
          <tbody>
            <tr>
              <th>KeyCode or ModifierFlag</th>
              <th>Description</th>
            </tr>
            <tr>
              <td>ModifierFlag::MY_HYPER</td>
              <td>ModifierFlag for new modifier.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_MODIFIER_MY_HYPER</td>
              <td>KeyCode for new modifier.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_LOCK_MY_HYPER</td>
              <td>KeyCode to toggle new modifier lock.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_LOCK_MY_HYPER_FORCE_ON</td>
              <td>KeyCode to turn new modifier lock on.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_LOCK_MY_HYPER_FORCE_OFF</td>
              <td>KeyCode to turn new modifier lock off.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_NEGATIVE_LOCK_MY_HYPER</td>
              <td>KeyCode to toggle new modifier negative lock.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_NEGATIVE_LOCK_MY_HYPER_FORCE_ON</td>
              <td>KeyCode to turn new modifier negative lock on.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_NEGATIVE_LOCK_MY_HYPER_FORCE_OFF</td>
              <td>KeyCode to turn new modifier negative lock off.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_STICKY_MY_HYPER</td>
              <td>KeyCode to toggle new modifier sticky state.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_STICKY_MY_HYPER_FORCE_ON</td>
              <td>KeyCode to turn new modifier sticky state on.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_STICKY_MY_HYPER_FORCE_OFF</td>
              <td>KeyCode to turn new modifier sticky state off.</td>
            </tr>
          </tbody>
        </table>

        <h2 id="modifierdef-attributes">Attributes</h2>
        <p>
          Add <code>notify="false"</code> attribute to modifierdef
          if you want to hide an indicator of modifier locks and sticky for new modifier.
        </p>

<pre class="prettyprint lang-xml">  &lt;modifierdef notify="false"&gt;MY_HYPER2&lt;/modifierdef&gt;</pre>
        <p>
          Without <code>notify="false"</code>, Karabiner shows an indicator when your own modifier is locked.
          <br />
          <img
          alt="lock indicator"
src="img/karabiner-lock-indicator@2x.png" width="302" height="88"          />
        </p>

        <h2 id="prepared-modifierdef">Prepared virtual modifier definitions</h2>
        <p>
          Karabiner provides some prepared virtual modifier.
          <br />
          You can use them without <code>&lt;modifierdef&gt;</code> in private.xml.
        </p>
        <ul>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/modifierdef.xml">List of virtual modifier definition.</a>
          </li>
        </ul>
      </section>

      <section>
        <div class="page-header">
          <h1 id="expand">Expand prepared settings's capabilities</h1>
        </div>

        <p>
          Some prepared settings provides a point to expand their capabilities..<br />
          For example, Emacs Mode allows you to specify ignored apps.
        </p>

        <p>
          You can expand them by using replacementdef.
        </p>

        <h2>Examples</h2>
        <p>Set Emacs Mode ignored apps to EMACS,TERMINAL,VI</p>
<pre class="prettyprint lang-xml">&lt;?xml version="1.0"?&gt;
&lt;root&gt;
  &lt;replacementdef&gt;
    &lt;replacementname&gt;EMACS_MODE_IGNORE_APPS&lt;/replacementname&gt;
    &lt;replacementvalue&gt;
      EMACS,
      TERMINAL,
      VI,
    &lt;/replacementvalue&gt;
  &lt;/replacementdef&gt;
&lt;/root&gt;</pre>
        <p>
          The replacements are defined in
          <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/replacementdef.xml">replacementdef.xml</a>.
        </p>
      </section>

      <section>
        <div class="page-header">
          <h1 id="prepared">How to modify prepared settings</h1>
        </div>

        <ol class="steps">
          <li>
            Get source code from <a href="https://github.com/tekezo/Karabiner" target="_blank">repository</a>.
          </li>

          <li>
            Prepared settings are defined in these files:
            <ul>
              <li>
                <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/checkbox.xml">src/core/server/Resources/checkbox.xml</a>
              </li>
              <li>
                <a target="_blank" href="https://github.com/tekezo/Karabiner/tree/version_10.11.0/src/core/server/Resources/include/checkbox/">src/core/server/Resources/include/checkbox/</a>
              </li>
            </ul>
            Modify them.
          </li>

          <li>
            Install XML files. Execute these commands in Terminal.
            <pre>
 $ cd src/core/server/Resources
 $ make install
</pre>
            (This commands ask your password in order to modify XML files in /Applications/Karabiner.app.)
          </li>

          <li>
            Then, reload XML files by "Reload XML" button on Preference.
            <div class="row">
              <div class="col-lg-4">
<a data-toggle="modal" href="#lightbox-10" class="thumbnail">
  <img src="img/karabiner-xml5@2x.png" alt="Reload XML" />
</a>
<div class="modal fade" id="lightbox-10" tabindex="30010">
  <div class="modal-dialog clickable" style="width: 728px;">
    <div class="modal-content">
      <div class="modal-body">
        <img src="img/karabiner-xml5@2x.png" alt="Reload XML" style="width: 100%" />
      </div>
    </div>
  </div>
</div>
              </div>
            </div>
          </li>
        </ol>

        Please <a target="_blank" href="https://github.com/tekezo/Karabiner/pulls">send a pull request on GitHub</a> when improvement is complete.
      </section>
    </div>
    <div class="col-md-3">
      <div class="bs-docs-sidebar" id="bs-docs-sidebar">
        <ul class="nav bs-sidenav">
              <li class="nav-header">examples</li>
              <li>
                <a href="#examples">
                  examples
                </a>
              </li>
              <li>
                <a href="#autogen-examples">
                  existing settings
                </a>
              </li>
              <li class="nav-header">basic</li>
              <li>
                <a href="#basic-syntax">
                  basic syntax
                </a>
              </li>
              <li class="nav-header">filters</li>
              <li>
                <a href="#filter-overview">
                  overview
                </a>
              </li>
              <li>
                <a href="#appdef">
                  specify application
                </a>
              </li>
              <li>
                <a href="#windownamedef">
                  specify window name (window title)
                </a>
              </li>
              <li>
                <a href="#uielementroledef">
                  specify ui element role
                </a>
              </li>
              <li>
                <a href="#devicedef">
                  specify device
                </a>
              </li>
              <li>
                <a href="#inputsourcedef">
                  specify input source
                </a>
              </li>
              <li class="nav-header">special key code</li>
              <li>
                <a href="#vkopenurldef">
                  launch app / open url / execute shell commands
                </a>
              </li>
              <li>
                <a href="#vkchangeinputsourcedef">
                  change input source
                </a>
              </li>
              <li class="nav-header">advanced features</li>
              <li>
                <a href="#include">
                  include external XML
                </a>
              </li>
              <li>
                <a href="#replacementdef">
                  string replacement
                </a>
              </li>
              <li>
                <a href="#keycode">
                  new keycode definition
                </a>
              </li>
              <li>
                <a href="#modifier">
                  new virtual modifier definition
                </a>
              </li>
              <li>
                <a href="#expand">
                  expand prepared settings's capabilities
                </a>
              </li>
              <li>
                <a href="#prepared">
                  modify prepared settings
                </a>
              </li>
        </ul>
      </div>
    </div>
  </div>
</div>


    <footer class="bs-docs-footer">
      <div class="container">
        <ul class="bs-docs-footer-links muted">
          <li><a href="#">Back to top</a></li>
        </ul>
      </div>
    </footer>

    <script src="/assets/jquery/jquery-2.1.4.min.js"></script>
    <script src="/assets/bootstrap/bootstrap-3.3.0/dist/js/bootstrap.min.js"></script>
      <script src="/assets/google-code-prettify/prettify.js" type="text/javascript"></script>
      <script type="text/javascript">jQuery(function(){ prettyPrint(); });</script>
      <script type="text/javascript" src="/assets/jquery/jquery.collapse.js"></script>
      <script type="text/javascript">jQuery(function(){ jQuery('#collapser').jqcollapse(); });</script>
    <script src="/js/pqrs.js?1376532151"></script>

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-56715024-1', 'auto');
      ga('send', 'pageview');

    </script>
  </body>
</html>
