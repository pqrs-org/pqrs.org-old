<div class="container">
  <header>
    <div class="page-header">
      <h1>private.xml Reference Manual</h1>
    </div>
  </header>

  <div class="row">
    <div class="col-md-9 pqrs-docs-container">
      <section>
        <div class="page-header">
          <h1 id="examples">Examples</h1>
        </div>

        <h2>A simple example of private.xml</h2>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <item>
          |    <name>Swap Space and Tab</name>
          |    <identifier>private.swap_space_and_tab</identifier>
          |    <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
          |    <autogen>__KeyToKey__ KeyCode::TAB, KeyCode::SPACE</autogen>
          |  </item>
          |
          |  <item>
          |    <name>Change Right Command Key to Escape</name>
          |    <identifier>private.right_command_to_escape</identifier>
          |    <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::ESCAPE</autogen>
          |  </item>
          |</root>
        {{/indented_xml}}

        <p>
          2 settings are added by this private.xml.
        </p>
        <div class="row">
          <div class="col-lg-4">
            {{#lightbox}}
              img/xml_basic.png preferences pane
            {{/lightbox}}
          </div>
        </div>

        <h2 id="autogen-examples">Examples of &lt;autogen&gt;</h2>
        <p>
          There are a lot of examples of <code>&lt;autogen&gt;</code> in "Samples for Karabiner Binding Developers" at
          the bottom of Karabiner Prefs.
          <br />
          You can see the raw XML from <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/include/checkbox/samples.xml">samples.xml</a>.
        </p>
        <div class="row">
          <div class="col-lg-4">
            {{#lightbox}}
              img/samples_for_developer.png Samples for Karabiner Developer
            {{/lightbox}}
          </div>
        </div>
        <p>
        </p>
        <p>
          In addition, prepared settings are described in checkbox.xml.
          These are also good examples of <code>&lt;autogen&gt;</code>.
        </p>
        <ul>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/checkbox.xml">checkbox.xml</a>
          </li>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/tree/version_10.11.0/src/core/server/Resources/include/checkbox/">include/checkbox/</a>
          </li>
        </ul>

        <p>
          The XML is also installed into your machine. <br />
          See <code>/Applications/Karabiner.app/Contents/Resources/</code>.
        </p>
      </section>

      <section>
        <div class="page-header">
          <h1 id="basic-syntax">Basic syntax</h1>
        </div>
        <p>
          You can add a new setting by <code>&lt;item&gt;</code>.
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |
          |  <item>
          |    <name>Name of Setting</name>
          |    <appendix>Optional Description of Setting</appendix>
          |    <identifier>Unique Identifier of Setting</identifier>
          |    <autogen>Behavior Definition</autogen>
          |    <autogen>Behavior Definition</autogen>
          |  </item>
          |
          |  <item>...</item>
          |
          |  <item>...</item>
          |
          |</root>
        {{/indented_xml}}

        <p>
          Please write <code>&lt;name&gt;</code>, <code>&lt;identifier&gt;</code>,
          <code>&lt;autogen&gt;</code> under <code>&lt;item&gt;</code>.
        </p>

        <table class="table">
          <tbody>
            <tr>
              <th>
                &lt;name&gt;
                <br />
                &lt;appendix&gt;
              </th>
              <td>
                These values are used in Preference Pane.
              </td>
            </tr>
            <tr>
              <th>
                &lt;identifier&gt;
              </th>
              <td>
                This value is used to identify setting.
                <br />
                You need to specify a unique value.
                We recommend you to add a "private." prefix to your identifier.
                It prevents conflicts with identifiers of prepared settings.
              </td>
            </tr>
            <tr>
              <th>
                &lt;autogen&gt;
              </th>
              <td>
                Definition of this setting behavior.
                <br />
                For example, __KeyToKey__, __PointingButtonToKey__.
              </td>
            </tr>
          </tbody>
        </table>

        <h2 id="keycode-list">List of KeyCode, ConsumerKeyCode, PointingButton</h2>
        <ul>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/bridge/generator/keycode/data/KeyCode.data">List of KeyCode.</a>
          </li>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/bridge/generator/keycode/data/ModifierFlag.data">List of ModifierFlag.</a>
          </li>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/bridge/generator/keycode/data/ConsumerKeyCode.data">List of ConsumerKeyCode (Brightness Control, Audio Volume Control, Music Control, etc).</a>
          </li>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/bridge/generator/keycode/data/PointingButton.data">List of PointingButton.</a>
          </li>
        </ul>

        <h2 id="keytokey-syntax">__KeyToKey__ syntax</h2>

        <h3>Plain</h3>
        <p>
          This <code>&lt;autogen&gt;</code> changes space key to tab key.
        </p>
        {{#indented_xml}}
          |<autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
        {{/indented_xml}}

        <h3>Modifier+Key to Key</h3>
        <p>
          This <code>&lt;autogen&gt;</code> changes "left control+space key" to tab key.
        </p>
        {{#indented_xml}}
          |<autogen>
          |  __KeyToKey__
          |  KeyCode::SPACE, ModifierFlag::CONTROL_L,
          |  KeyCode::TAB
          |</autogen>
        {{/indented_xml}}

        <h3>Modifier+Key to Modifier+Key</h3>
        <p>
          This <code>&lt;autogen&gt;</code> changes "left control+space key" to "left control+tab key".
        </p>
        {{#indented_xml}}
          |<autogen>
          |  __KeyToKey__
          |  KeyCode::SPACE, ModifierFlag::CONTROL_L,
          |  KeyCode::TAB,   ModifierFlag::CONTROL_L
          |</autogen>
        {{/indented_xml}}

        <h3>Multiple modifiers</h3>
        <p>
          You can use "|" to specify multiple modifiers.
        </p>
        <p>
          This <code>&lt;autogen&gt;</code> changes "left control+fn+space key" to tab key.
        </p>
        {{#indented_xml}}
          |<autogen>
          |  __KeyToKey__
          |  KeyCode::SPACE, ModifierFlag::CONTROL_L | ModifierFlag::FN,
          |  KeyCode::TAB
          |</autogen>
        {{/indented_xml}}

        <h3>ModifierFlag::NONE</h3>
        <p>
          If you want to change key behavior only when specific modifiers are pressed, use ModifierFlag::NONE.
        </p>
        <p>
          This <code>&lt;autogen&gt;</code> changes "fn+space key" to tab key and retain other modifier combinations+space key behavior.
        </p>
        <div class="row">
          <div class="col-lg-6">
            <table class="table">
              <thead>
                <tr>
                  <th>Physical key</th>
                  <th>Changed key</th>
                  <th>State</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>space</td>
                  <td>space</td>
                  <td>
                    <span class="label label-default">Not changed</span>
                  </td>
                </tr>
                <tr>
                  <td>control+space</td>
                  <td>control+space</td>
                  <td>
                    <span class="label label-default">Not changed</span>
                  </td>
                </tr>
                <tr>
                  <td>fn+space</td>
                  <td>tab</td>
                  <td>
                    <span class="label label-info">Changed</span>
                  </td>
                </tr>
                <tr>
                  <td>fn+control+space</td>
                  <td>fn+control+space</td>
                  <td>
                    <span class="label label-default">Not changed</span>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>

        {{#indented_xml}}
          |<autogen>
          |  __KeyToKey__
          |  KeyCode::SPACE, ModifierFlag::FN | ModifierFlag::NONE,
          |  KeyCode::TAB
          |</autogen>
        {{/indented_xml}}

        <h3>Change to multiple keys</h3>
        <p>
          This <code>&lt;autogen&gt;</code> changes space key to tab,return key.
        </p>
        {{#indented_xml}}
          |<autogen>
          |  __KeyToKey__
          |  KeyCode::SPACE,
          |  KeyCode::TAB, KeyCode::RETURN
          |</autogen>
        {{/indented_xml}}

        <h2 id="order">Order of &lt;autogen&gt;</h2>

        <h3>Basic case</h3>
        <p>
          Karabiner applies only the first matched <code>&lt;autogen&gt;</code>.
        </p>
        <p>
          The following autogens change space key to tab key (not return key).
        </p>
        {{#indented_xml}}
          |<autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
          |<autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::RETURN</autogen>
        {{/indented_xml}}

        <h3>More complex case</h3>
        <p>
          If you want to change "shift+space to tab" and "space to return",
          you need to order <code>&lt;autogen&gt;</code> as follows.
        </p>
        <div class="row">
          <div class="col-lg-6">
            <table class="table">
              <thead>
                <tr>
                  <th>Physical key</th>
                  <th>Changed key</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>shift+space</td>
                  <td>tab</td>
                </tr>
                <tr>
                  <td>space</td>
                  <td>return</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
        {{#indented_xml}}
          |<!-- shift+space to tab -->
          |<autogen>__KeyToKey__ KeyCode::SPACE, ModifierFlag::SHIFT_L, KeyCode::TAB</autogen>

          |<!-- space to return -->
          |<autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::RETURN</autogen>
        {{/indented_xml}}

        <p>
          <span class="label label-warning">Wrong case</span>
          If you've put them in reverse order, Karabiner changes "shift+space" to "shift+return".
        </p>

        <p>
        </p>
        {{#indented_xml}}
          |<!-- Karabiner always changes space key to return key even if you're pressing shift modifier. -->
          |<autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::RETURN</autogen>
          |
          |<!-- *** This autogen is never applied. *** -->
          |<autogen>__KeyToKey__ KeyCode::SPACE, ModifierFlag::SHIFT_L, KeyCode::TAB</autogen>
        {{/indented_xml}}

        <h2 id="identifier">Type of identifier prefix</h2>

        <p>
          You can add a special behavior by using some prefix on &lt;identifier&gt;.
        </p>

        <table class="table">
          <thead>
            <tr>
              <th>
                Prefix
              </th>
              <th>
                Behavior
              </th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>
                notsave.
              </td>
              <td>
                "notsave." prefix is designed for creating "mode".
                <ul>
                  <li>This setting is not saved even if it was enabled.</li>
                  <li>This setting priority is higher than normal settings.</li>
                  <li>User cannot enable this setting by Preference. (Use KeyCode::VK_CONFIG_*.)</li>
                </ul>
              </td>
            </tr>
          </tbody>
        </table>
      </section>

      <section>
        <div class="page-header">
          <h1 id="filter-overview">Filter: Overview</h1>
        </div>
        <p>
          You can define settings which are effective in specific conditions. <br />
          For example:
        </p>
        <ul>
          <li>Change keys in some apps.</li>
          <li>Change keys in some devices.</li>
          <li>Change keys in some input sources.</li>
          <li>Change keys if specified configuration is enabled.</li>
        </ul>

        <p>
          You can see all filters and examples in <a href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/include/checkbox/samples/filters.xml">filters.xml</a>.
          (You can try them by searching "developer filters" in Preferences.)
        </p>
        <div class="row">
          <div class="col-lg-4">
            {{#lightbox}}
              img/filter-examples.png filter-examples
            {{/lightbox}}
          </div>
        </div>

        <h2>Basic usage</h2>

        <p>
          Put filters into <code>&lt;item&gt;</code>.
          If multiple filters are specified, <code>&lt;autogen&gt;</code> will be effective if all conditions are true.
        </p>

        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <item>
          |    <name>Swap space key and tab key</name>
          |    <identifier>private.filters_example</identifier>
          |
          |    <!--
          |      Swap keys in Safari, Firefox or Google Chrome if you are using Apple keyboards.
          |    -->
          |
          |    <only>SAFARI, FIREFOX, GOOGLE_CHROME</only>
          |
          |    <device_only>DeviceVendor::APPLE_COMPUTER, DeviceProduct::ANY</device_only>
          |
          |    <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
          |    <autogen>__KeyToKey__ KeyCode::TAB, KeyCode::SPACE</autogen>
          |  </item>
          |</root>
        {{/indented_xml}}

        <h2>Narrow filters</h2>

        <p>
          Filters are applied to all <code>&lt;autogen&gt;</code> that are same level nodes or children nodes. <br />
          If you want to narrow filters, please use <code>&lt;block&gt;</code>.
        </p>

        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <item>
          |    <name>Change numeric keys to keypad.</name>
          |    <appendix>+ Change space key to left click in Safari.</appendix>
          |    <identifier>private.filter_block_example</identifier>
          |
          |    <autogen>__KeyToKey__ KeyCode::KEY_0, KeyCode::KEYPAD_0</autogen>
          |    <autogen>__KeyToKey__ KeyCode::KEY_1, KeyCode::KEYPAD_1</autogen>
          |    <autogen>__KeyToKey__ KeyCode::KEY_2, KeyCode::KEYPAD_2</autogen>
          |    <autogen>__KeyToKey__ KeyCode::KEY_3, KeyCode::KEYPAD_3</autogen>
          |    <autogen>__KeyToKey__ KeyCode::KEY_4, KeyCode::KEYPAD_4</autogen>
          |    <autogen>__KeyToKey__ KeyCode::KEY_5, KeyCode::KEYPAD_5</autogen>
          |    <autogen>__KeyToKey__ KeyCode::KEY_6, KeyCode::KEYPAD_6</autogen>
          |    <autogen>__KeyToKey__ KeyCode::KEY_7, KeyCode::KEYPAD_7</autogen>
          |    <autogen>__KeyToKey__ KeyCode::KEY_8, KeyCode::KEYPAD_8</autogen>
          |    <autogen>__KeyToKey__ KeyCode::KEY_9, KeyCode::KEYPAD_9</autogen>
          |
          |    <block>
          |      <!-- This filter will not be applied to parent autogens. -->
          |      <only>SAFARI</only>
          |      <autogen>__KeyToKey__ KeyCode::SPACE, PointingButton::LEFT</autogen>
          |    </block>
          |  </item>
          |</root>
        {{/indented_xml}}
      </section>

      <section>
        <div class="page-header">
          <h1 id="appdef">Filter: Specify application</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can define settings which are effective in specific applications only.
          <br />
          Add <code>&lt;only&gt;</code> or <code>&lt;not&gt;</code> to your <code>&lt;item&gt;</code>.
        </p>
        <p>
          This private.xml exchanges space key and tab key in Safari and Google Chrome.
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <item>
          |    <name>Swap Space and Tab</name>
          |    <identifier>private.app_safari_swap_space_and_tab</identifier>
          |
          |    <only>SAFARI, GOOGLE_CHROME</only>
          |
          |    <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
          |    <autogen>__KeyToKey__ KeyCode::TAB, KeyCode::SPACE</autogen>
          |  </item>
          |</root>
        {{/indented_xml}}

        <h2 id="appdef-steps">Steps to define an application specific setting</h2>
        <h3>
          Examine a bundle identifier of target application
        </h3>
        <ol class="steps">
          <li>
            <p>
              Launch EventViewer from a menu.
            </p>
            <p>
              <img
              alt="menu"
              {{#imgsrc}}
                img/eventviewer-menu@2x.png
              {{/imgsrc}}
              />
            </p>
          </li>
          <li>
            <p>
              See "App" tab of EventViewer.
              <br />
              This list is updated when you changed the current application.
            </p>
            <p>
              Change the current application to target application. Then press "copy to pasteboard" button.
              <br />
              You can paste this information to text area.
            </p>

            <div class="row">
              <div class="col-lg-4">
                {{#lightbox}}
                  img/eventviewer-app.png eventviewer-app
                {{/lightbox}}
              </div>
            </div>
          </li>
        </ol>

        <h3>Add an application definition to your private.xml.</h3>
        <ol class="steps">
          <li>
            Add <code>&lt;appdef&gt;</code> to your private.xml.
            <br />
            <code>&lt;appname&gt;</code> is a name of application which you use in <code>&lt;only&gt;</code> filter.
            <br />
            Write the bundle identifier into <code>&lt;equal&gt;</code>.
            {{#indented_xml}}
              |<?xml version="1.0"?>
              |<root>
              |  <appdef>
              |    <appname>APPSTORE</appname>
              |    <equal>com.apple.appstore</equal>
              |  </appdef>
              |</root>
            {{/indented_xml}}
          </li>
          <li>
            Then, you can use <code>&lt;only&gt;APPSTORE&lt;/only&gt;</code> in private.xml.
            {{#indented_xml}}
              |<?xml version="1.0"?>
              |<root>
              |  <appdef>
              |    <appname>APPSTORE</appname>
              |    <equal>com.apple.appstore</equal>
              |  </appdef>
              |
              |  <item>
              |    <name>Space to Tab in App Store.app</name>
              |    <identifier>private.appdef</identifier>
              |    <only>APPSTORE</only>
              |    <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
              |  </item>
              |</root>
            {{/indented_xml}}
          </li>
        </ol>

        <h2 id="multiple-appdef">Multiple apps</h2>
        <p>
          You can specify multiple apps by a comma separated list. <br />
          For example, <code>&lt;only&gt;GOOGLE_CHROME, FIREFOX, SAFARI&lt;/only&gt;</code> means "Google Chrome or Firefox or Safari".
        </p>

        <h2 id="appdef-syntax">appdef syntax</h2>
        <p>
          You have to put one <code>&lt;appname&gt;</code> into <code>&lt;appdef&gt;</code>.<br />
          And you can put multiple <code>&lt;equal&gt;</code>, <code>&lt;prefix&gt;</code> and <code>&lt;suffix&gt;</code>.
        </p>
        <table class="table">
          <tbody>
            <tr>
              <th>
                &lt;appname&gt;
              </th>
              <td>
                This value is used in <code>&lt;only&gt;</code> and <code>&lt;not&gt;</code> filters.
              </td>
            </tr>
            <tr>
              <th>
                &lt;equal&gt;
              </th>
              <td>
                Specify an entire bundle identifier.
              </td>
            </tr>
            <tr>
              <th>
                &lt;prefix&gt;<br />
                &lt;suffix&gt;
              </th>
              <td>
                Specify a prefix/suffix of bundle identifier. <br />
                For example, <code>&lt;prefix&gt;org.pqrs.&lt;/prefix&gt;</code> matches any bundle identifiers that start with "org.pqrs.". (eg. org.pqrs.Karabiner, org.pqrs.Seil)
              </td>
            </tr>
          </tbody>
        </table>

        <p>
          Multiple &lt;equal&gt;, &lt;prefix&gt; and &lt;suffix&gt; are joined by 'OR'. <br />
          For example, the following appdef will be matched "org.pqrs.aaa" or "org.pqrs.bbb" or "org.pqrs.ccc.*" or "*.local".
        </p>

        {{#indented_xml}}
          |<appdef>
          |  <appname>PQRS</appname>
          |  <equal>org.pqrs.aaa</equal>
          |  <equal>org.pqrs.bbb</equal>
          |  <prefix>org.pqrs.ccc.</prefix>
          |  <suffix>.local</suffix>
          |</appdef>
        {{/indented_xml}}

        <h2 id="prepared-appdef">Prepared application definitions</h2>
        <p>
          Karabiner provides
          <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/appdef.xml">various application definitions</a>.
          <br />
          You can use them without <code>&lt;appdef&gt;</code> in private.xml.
        </p>
        <p>
          You can also overwrite existent application definitions by private.xml.
          <br />
          If you overwrite TERMINAL definition as follows,
          <code>&lt;only&gt;TERMINAL&lt;/only&gt;</code> is effective in Apple's Terminal.app only
          (not iTerm2 and other terminal apps).
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <appdef>
          |    <appname>TERMINAL</appname>
          |    <equal>com.apple.Terminal</equal>
          |  </appdef>
          |</root>
        {{/indented_xml}}
      </section>

      <section>
        <div class="page-header">
          <h1 id="windownamedef">Filter: Specify window name (window title)</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can define settings which are effective in specific window name only.
          <br />
          Add <code>&lt;windowname_only&gt;</code> or <code>&lt;windowname_not&gt;</code> to your <code>&lt;item&gt;</code>.
        </p>
        <p>
          This private.xml disables command-w in Gmail on Google Chrome.
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <item>
          |    <name>Disable command-w in Gmail on Google Chrome.</name>
          |    <identifier>private.windowname_google_chrome_gmail_disable_close</identifier>
          |    <only>GOOGLE_CHROME</only>
          |
          |    <windowname_only>Gmail</windowname_only>
          |
          |    <autogen>
          |      __KeyToKey__
          |      KeyCode::W, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND | ModifierFlag::NONE,
          |      KeyCode::VK_NONE,
          |    </autogen>
          |  </item>
          |</root>
        {{/indented_xml}}

        <h2 id="windownamedef-steps">Steps to define an window name specific setting</h2>
        <h3>
          Examine window name
        </h3>
        <ol class="steps">
          <li>
            <p>
              Launch EventViewer from a menu.
            </p>
            <p>
              <img
              alt="menu"
              {{#imgsrc}}
                img/eventviewer-menu@2x.png
              {{/imgsrc}}
              />
            </p>
          </li>
          <li>
            <p>
              See "App" tab of EventViewer.
              <br />
              This list is updated when a window name is changed.
            </p>
            <div class="alert alert-warning">
              Note: The window name detection does not work properly in some apps. (eg. Safari.)
            </div>
            <p>
              Focus target window. Then press "copy to pasteboard" button.
              <br />
              You can paste this information to text area.
            </p>

            <div class="row">
              <div class="col-lg-4">
                {{#lightbox}}
                  img/eventviewer-app.png eventviewer-app
                {{/lightbox}}
              </div>
            </div>
          </li>
        </ol>

        <h3>Add an window name definition to your private.xml.</h3>
        <ol class="steps">
          <li>
            Add <code>&lt;windownamedef&gt;</code> to your private.xml.
            <br />
            <code>&lt;name&gt;</code> is a name of definition which you use in <code>&lt;windowname_only&gt;</code> filter.
            <br />
            Write regular expressions pattern into <code>&lt;regex&gt;</code>.
            <a href="http://www.cplusplus.com/reference/regex/ECMAScript/" target="_blank">(regex patterns follow the ECMAScript syntax.)</a>
            {{#indented_xml}}
              |<?xml version="1.0"?>
              |<root>
              |  <windownamedef>
              |    <name>Google_Search</name>
              |    <regex> - Google Search$</regex>
              |  </windownamedef>
              |</root>
            {{/indented_xml}}
          </li>
          <li>
            Then, you can use <code>&lt;windowname_only&gt;Google_Search&lt;/windowname_only&gt;</code> in private.xml.
            {{#indented_xml}}
              |<?xml version="1.0"?>
              |<root>
              |  <windownamedef>
              |    <name>Google_Search</name>
              |    <regex> - Google Search$</regex>
              |  </windownamedef>
              |
              |  <item>
              |    <name>Disable command-w in Google Search on Google Chrome.</name>
              |    <identifier>private.windownamedef</identifier>
              |    <windowname_only>Google_Search</windowname_only>
              |    <autogen>
              |      __KeyToKey__
              |      KeyCode::W, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND | ModifierFlag::NONE,
              |      KeyCode::VK_NONE,
              |    </autogen>
              |  </item>
              |</root>
            {{/indented_xml}}
          </li>
        </ol>

        <h2 id="prepared-windownamedef">Prepared window name definitions</h2>
        <p>
          Karabiner provides
          <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/windownamedef.xml">various window name definitions</a>.
          <br />
          You can use them without <code>&lt;windownamedef&gt;</code> in private.xml.
        </p>
        <p>
          You can also overwrite existent window name definitions by private.xml.
        </p>
      </section>

      <section>
        <div class="page-header">
          <h1 id="uielementroledef">Filter: Specify ui element role</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can define settings which are effective in specific ui element role only.
          <br />
          It's useful when you want to make settings which are effective only if the focused element is text area (text field).
        </p>
        <p>
          Add <code>&lt;uielementrole_only&gt;</code> or <code>&lt;uielementrole_not&gt;</code> to your <code>&lt;item&gt;</code>.
        </p>
        <p>
          This private.xml changes hjkl keys to arrow keys in Finder. <br />
          And hjkl keys will not be modified if you are editing a file name.
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <item>
          |    <name>Change hjkl keys to arrow keys in Finder</name>
          |    <identifier>private.hjkl_keys_to_arrow_keys_in_finder</identifier>
          |
          |    <uielementrole_not>AXTextArea, AXTextField</uielementrole_not>
          |
          |    <only>FINDER</only>
          |    <modifier_only>
          |      ModifierFlag::NONE,
          |      ModifierFlag::SHIFT_L | ModifierFlag::NONE,
          |      ModifierFlag::SHIFT_R | ModifierFlag::NONE,
          |    </modifier_only>
          |    <autogen>__KeyToKey__ KeyCode::H, KeyCode::CURSOR_LEFT</autogen>
          |    <autogen>__KeyToKey__ KeyCode::J, KeyCode::CURSOR_DOWN</autogen>
          |    <autogen>__KeyToKey__ KeyCode::K, KeyCode::CURSOR_UP</autogen>
          |    <autogen>__KeyToKey__ KeyCode::L, KeyCode::CURSOR_RIGHT</autogen>
          |  </item>
          |</root>
        {{/indented_xml}}

        <h2 id="confirm-uielementrole">Confirm ui element role</h2>
        <p>
          You can confirm a focused ui element's role by EventViewer.
        </p>
        <div class="row">
          <div class="col-lg-4">
            {{#lightbox}}
              img/eventviewer-app.png eventviewer-app
            {{/lightbox}}
          </div>
        </div>

        <h2 id="prepared-uielementroledef">Prepared ui element role definitions</h2>
        <p>
          Karabiner provides
          <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/uielementroledef.xml">various ui element role definitions</a>.
        </p>
        <p>
          You can also add your own ui element role by &lt;uielementroledef&gt; tag.
        </p>
      </section>

      <section>
        <div class="page-header">
          <h1 id="devicedef">Filter: Specify device</h1>
        </div>

        <p>
          You can define settings which are effective on specific device only.
          <br />
          Add <code>&lt;device_only&gt;</code> or <code>&lt;device_not&gt;</code> to your <code>&lt;item&gt;</code>.
        </p>
        <p>
          This private.xml turns scroll wheel off on Magic Mouse.
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <item>
          |    <name>Disable ScrollWheel on Magic Mouse</name>
          |    <identifier>private.dropscrollwheel_0x05ac_0x030d</identifier>
          |
          |    <device_only>DeviceVendor::APPLE_COMPUTER,DeviceProduct::MAGIC_MOUSE</device_only>
          |
          |    <autogen>__DropScrollWheel__</autogen>
          |  </item>
          |</root>
        {{/indented_xml}}

        <h2 id="devicedef-steps">Steps to define a device specific setting</h2>

        <h3>Examine Vendor ID and Product ID of a target device</h3>
        <ol class="steps">
          <li>
            <p>
              Launch EventViewer from a menu.
            </p>
            <p>
              <img
              alt="menu"
              {{#imgsrc}}
                img/eventviewer-menu@2x.png
              {{/imgsrc}}
              />
            </p>
          </li>
          <li>
            <p>
              See "Devices" tab of EventViewer.
            </p>
            <p>
              Then press "copy to pasteboard" button.
              <br />
              You can paste this information to text area.
            </p>

            <div class="row">
              <div class="col-lg-4">
                {{#lightbox}}
                  img/eventviewer-devices.png eventviewer-devices
                {{/lightbox}}
              </div>
            </div>
          </li>
        </ol>

        <h3>Add an device definition to your private.xml</h3>
        <ol class="steps">
          <li>
            Add <code>&lt;devicevendordef&gt;</code> and <code>&lt;deviceproductdef&gt;</code> to your private.xml.
            {{#indented_xml}}
              |<?xml version="1.0"?>
              |<root>
              |  <devicevendordef>
              |    <vendorname>HEWLETT_PACKARD</vendorname>
              |    <vendorid>0x03f0</vendorid>
              |  </devicevendordef>
              |
              |  <deviceproductdef>
              |    <productname>MY_HP_KEYBOARD</productname>
              |    <productid>0x0224</productid>
              |  </deviceproductdef>
              |</root>
            {{/indented_xml}}
          </li>
          <li>
            Then, you can use <code>&lt;device_only&gt;</code> in private.xml.
            {{#indented_xml}}
              |<?xml version="1.0"?>
              |<root>
              |  <devicevendordef>
              |    <vendorname>HEWLETT_PACKARD</vendorname>
              |    <vendorid>0x03f0</vendorid>
              |  </devicevendordef>
              |
              |  <deviceproductdef>
              |    <productname>MY_HP_KEYBOARD</productname>
              |    <productid>0x0224</productid>
              |  </deviceproductdef>
              |
              |  <item>
              |    <name>Space to Tab in MY_HP_KEYBOARD</name>
              |    <identifier>private.deviceproductdef</identifier>
              |    <device_only>DeviceVendor::HEWLETT_PACKARD, DeviceProduct::MY_HP_KEYBOARD</device_only>
              |    <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
              |  </item>
              |
              |</root>
            {{/indented_xml}}
          </li>
        </ol>

        <h2 id="device-rawvalue">Using RawValue</h2>
        <p>
          You can also use RawValue to specify Vendor ID and Product ID.
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |
          |  <item>
          |    <name>Space to Tab in MY_HP_KEYBOARD</name>
          |    <identifier>private.deviceproductdef_rawvalue</identifier>
          |    <device_only>DeviceVendor::RawValue::0x03f0, DeviceProduct::RawValue::0x0224</device_only>
          |    <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
          |  </item>
          |
          |</root>
        {{/indented_xml}}

        <h2 id="multiple-devicedef">Multiple devices</h2>
        <p>
          You can specify multiple devices by a comma separated list. <br />
          For example, the following &lt;device_only&gt; means "Magic Mouse or Logitech Unifying".
        </p>
        {{#indented_xml}}
          |  <device_only>
          |    DeviceVendor::APPLE_COMPUTER, DeviceProduct::MAGIC_MOUSE,
          |    DeviceVendor::LOGITECH, DeviceProduct::LOGITECH_UNIFYING_0xc52b,
          |  </device_only>
        {{/indented_xml}}

        <h2 id="prepared-devicedef">Prepared device definitions</h2>
        <p>
          Karabiner provides various Vendor ID and Product ID definitions.
          <br />
          You can use them without <code>&lt;devicevendordef&gt;</code> and
          <code>&lt;deviceproductdef&gt;</code> in private.xml.
        </p>
        <ul>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/devicevendordef.xml">List of prepared Vendor ID</a>
          </li>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/deviceproductdef.xml">List of prepared Product ID</a>
          </li>
        </ul>
        <p>
          You can also overwrite existent device definitions by private.xml.
        </p>

        <h2 id="locationid">How to distinguish multiple devices which have same Vendor ID and Product ID</h2>
        <p>
          You can use "Location ID" in order to distinguish multiple devices which have same Vendor ID and Product ID.
        </p>
        <h3>Learn about "Location ID"</h3>
        <ul>
          <li>"Location ID" is an unique identifier even if devices have same Vendor ID and Product ID.</li>
          <li>The behavior of "Location ID" is different for each type of device.</li>
        </ul>
        <table class="table">
          <tbody>
            <tr>
              <th>
                Device Type
              </th>
              <th>
                What's Location ID?
              </th>
              <th>
                Is immutable?
              </th>
            </tr>
            <tr>
              <td>
                USB Device
              </td>
              <td>
                Location ID is determined by USB port.
              </td>
              <td>
                This value will be changed when you pull out USB device and plug it into other USB port.
              </td>
            </tr>
            <tr>
              <td>
                Bluetooth Device
              </td>
              <td>
                Location ID is determined by Bluetooth Address.
              </td>
              <td>
                This value is immutable.
              </td>
            </tr>
          </tbody>
        </table>

        <h3>Examine Location ID</h3>
        <p>
          You can examin Location ID by <a href="document.html.{{language}}#eventviewer">EventViewer</a>.
        </p>

        <div class="row">
          <div class="col-lg-4">
            {{#lightbox}}
              img/eventviewer-locationid.png Location ID
            {{/lightbox}}
          </div>
        </div>

        <h3>Location ID in XML</h3>
        <p>
          You can specify Location ID like this.
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <devicevendordef>
          |    <vendorname>HEWLETT_PACKARD</vendorname>
          |    <vendorid>0x03f0</vendorid>
          |  </devicevendordef>
          |
          |  <deviceproductdef>
          |    <productname>MY_HP_KEYBOARD</productname>
          |    <productid>0x0224</productid>
          |  </deviceproductdef>
          |
          |  <devicelocationdef>
          |    <locationname>MY_HP_KEYBOARD_PRIMARY</locationname>
          |    <locationid>0xfa120000</locationid>
          |  </devicelocationdef>
          |
          |  <item>
          |    <name>Space to Tab in MY_HP_KEYBOARD</name>
          |    <identifier>private.deviceproductdef</identifier>
          |    <device_only>
          |      DeviceVendor::HEWLETT_PACKARD,
          |      DeviceProduct::MY_HP_KEYBOARD,
          |      DeviceLocation::MY_HP_KEYBOARD_PRIMARY,
          |    </device_only>
          |    <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
          |  </item>
          |
          |</root>
        {{/indented_xml}}
      </section>

      <section>
        <div class="page-header">
          <h1 id="inputsourcedef">Filter: Specify input source</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can define settings which are effective in specific input source only.
          <br />
          Add <code>&lt;inputsource_only&gt;</code> or <code>&lt;inputsource_not&gt;</code> to your <code>&lt;item&gt;</code>.
        </p>
        <p>
          This private.xml exchanges space key and tab key on Dvorak.
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <inputsourcedef>
          |    <name>MY_DVORAK</name>
          |    <inputsourceid_prefix>com.apple.keylayout.Dvorak</inputsourceid_prefix>
          |  </inputsourcedef>
          |
          |  <item>
          |    <name>Swap Space and Tab</name>
          |    <identifier>private.my_dvorak_swap_space_and_tab</identifier>
          |
          |    <inputsource_only>MY_DVORAK</inputsource_only>
          |
          |    <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
          |    <autogen>__KeyToKey__ KeyCode::TAB, KeyCode::SPACE</autogen>
          |  </item>
          |</root>
        {{/indented_xml}}

        <h2>Steps</h2>
        <ol class="steps">
          <li>
            <p>
              Examine Input Source ID of target input source.
              <br />
              <a href="#inputsourceid">How to examine input source id.</a>
            </p>
          </li>
          <li>
            <p>
              Add <code>&lt;inputsourcedef&gt;</code> your private.xml.
            </p>
            {{#indented_xml}}
              |<?xml version="1.0"?>
              |<root>
              |  <inputsourcedef>
              |    <name>MY_DVORAK</name>
              |    <inputsourceid_prefix>com.apple.keylayout.Dvorak</inputsourceid_prefix>
              |  </inputsourcedef>
              |</root>
            {{/indented_xml}}
          </li>
          <li>
            <p>
              Then, you can use <code>&lt;inputsource_only&gt;</code> and <code>&lt;inputsource_not&gt;</code> in private.xml.
            </p>
            {{#indented_xml}}
              |<?xml version="1.0"?>
              |<root>
              |  <inputsourcedef>
              |    <name>MY_DVORAK</name>
              |    <inputsourceid_prefix>com.apple.keylayout.Dvorak</inputsourceid_prefix>
              |  </inputsourcedef>
              |
              |  <item>
              |    <name>Swap Space and Tab</name>
              |    <identifier>private.my_dvorak_swap_space_and_tab</identifier>
              |    <inputsource_only>MY_DVORAK</inputsource_only>
              |    <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
              |    <autogen>__KeyToKey__ KeyCode::TAB, KeyCode::SPACE</autogen>
              |  </item>
              |</root>
            {{/indented_xml}}
          </li>
        </ol>

        <h2>Prepared input source definitions</h2>
        <p>
          Karabiner provides <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/inputsourcedef.xml">various input source definitions</a>.
          <br />
          You can use them without <code>&lt;inputsourcedef&gt;</code> in private.xml.
        </p>

        <h2 id="inputsourceid">How to examine input source id</h2>
        <p>
          You can examine input source id by Event Viewer.
        </p>
        <ol>
          <li>Launch <a href="document.html.{{ language }}#eventviewer">Event Viewer</a>.</li>
          <li>Switch input source into target input source.</li>
          <li>Switch input source into other input source.</li>
          <li>Again, switch input source into target input source.</li>
          <li>See <span class="label label-default">Input Source ID</span> in Event Viewer.</li>
        </ol>
        <div class="row">
          <div class="col-lg-4">
            {{#lightbox}}
              img/eventviewer-inputsource.png Event Viewer
            {{/lightbox}}
          </div>
        </div>
      </section>

      <section>
        <div class="page-header">
          <h1 id="vkopenurldef">Launch app / Open URL / Execute shell commands</h1>
        </div>

        <h2>An example</h2>
        <p>
          This private.xml opens web site, launches calculator and executes a shell command "/bin/date | /usr/bin/pbcopy".
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <!-- generic URL -->
          |  <vkopenurldef>
          |    <name>KeyCode::VK_OPEN_URL_WEB_karabiner</name>
          |    <url>https://pqrs.org/osx/karabiner/</url>
          |  </vkopenurldef>
          |
          |  <!-- file path -->
          |  <vkopenurldef>
          |    <name>KeyCode::VK_OPEN_URL_APP_Calculator</name>
          |    <url type="file">/Applications/Calculator.app</url>
          |  </vkopenurldef>
          |
          |  <!-- shell commands -->
          |  <vkopenurldef>
          |    <name>KeyCode::VK_OPEN_URL_SHELL_date_pbcopy</name>
          |    <url type="shell">
          |      <![CDATA[    /bin/date | /usr/bin/pbcopy    ]]>
          |    </url>
          |  </vkopenurldef>
          |
          |  <item>
          |    <name>Change right-command + w to open https://pqrs.org/osx/karabiner/</name>
          |    <identifier>private.right_command_w</identifier>
          |    <autogen>
          |      __KeyToKey__
          |      KeyCode::W, ModifierFlag::COMMAND_R,
          |      KeyCode::VK_OPEN_URL_WEB_karabiner,
          |    </autogen>
          |  </item>
          |
          |  <item>
          |    <name>Change right-command + c to launch calculator</name>
          |    <identifier>private.right_command_c</identifier>
          |    <autogen>
          |      __KeyToKey__
          |      KeyCode::C, ModifierFlag::COMMAND_R,
          |      KeyCode::VK_OPEN_URL_APP_Calculator,
          |    </autogen>
          |  </item>
          |
          |  <item>
          |    <name>Change right-command + d to execute /bin/date | /usr/bin/pbcopy</name>
          |    <identifier>private.right_command_d</identifier>
          |    <autogen>
          |      __KeyToKey__
          |      KeyCode::D, ModifierFlag::COMMAND_R,
          |      KeyCode::VK_OPEN_URL_SHELL_date_pbcopy,
          |    </autogen>
          |  </item>
          |</root>
        {{/indented_xml}}

        <h2>Virtual key code definition</h2>
        <p>
          You can define new virtual key code by <code>&lt;vkopenurldef&gt;</code>.
        </p>
        <ul>
          <li>
            <p>
              <code>&lt;name&gt;</code> is a name of virtual key code.
              This name must be started with <code>KeyCode::VK_OPEN_URL_</code>.
              <br />
              For example, <code>&lt;name&gt;KeyCode::VK_OPEN_URL_Yourapp&lt;/name&gt;</code>.
            </p>
          </li>
          <li>
            <p>
              <code>&lt;url&gt;</code> is a url of virtual key code.
              <br />
              &lt;url&gt; has a "type" attribute which determines how treat the value.
            </p>
            <table class="table">
              <tbody>
                <tr>
                  <th>Type attribute</th>
                  <th>Description</th>
                </tr>
                <tr>
                  <td>(empty)</td>
                  <td>If you does not specify a type attribute, it will be treated as a generic URL.</td>
                </tr>
                <tr>
                  <td>type="file"</td>
                  <td>The value will be treated as file path.</td>
                </tr>
                <tr>
                  <td>type="shell"</td>
                  <td>The value will be treated as shell commands.</td>
                </tr>
              </tbody>
            </table>
          </li>
          <li>
            <p>
              <code>&lt;background /&gt;</code> (optional)<br />
              If &lt;background /&gt; exists, URL will be opened in background.
            </p>
          </li>
        </ul>

        <h2>Prepared virtual key code definitions</h2>
        <p>
          Karabiner provides
          <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/vkopenurldef.xml">various virtual key code definitions</a>.
          <br />
          You can use them without <code>&lt;vkopenurldef&gt;</code> in private.xml.
        </p>
      </section>

      <section>
        <div class="page-header">
          <h1 id="vkchangeinputsourcedef">Change input source by virtual key code.</h1>
        </div>

        <h2>An example</h2>
        <p>
          This private.xml changes input source to Dvorak by <span class="label label-default">Right Shift Key + D</span>.
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <vkchangeinputsourcedef>
          |    <name>KeyCode::VK_CHANGE_INPUTSOURCE_MY_DVORAK</name>
          |    <inputsourceid_equal>com.apple.keylayout.Dvorak</inputsourceid_equal>
          |  </vkchangeinputsourcedef>
          |
          |  <item>
          |    <name>Change input source to Dvorak by right shift key + D</name>
          |    <identifier>private.change_input_source_to_dvorak</identifier>
          |    <autogen>
          |      __KeyToKey__
          |      KeyCode::D, ModifierFlag::SHIFT_R,
          |      KeyCode::VK_CHANGE_INPUTSOURCE_MY_DVORAK
          |    </autogen>
          |  </item>
          |</root>
        {{/indented_xml}}

        <h2>Virtual key code definition</h2>
        <p>
          You can define new virtual key code by <code>&lt;vkchangeinputsourcedef&gt;</code>.
        </p>
        <ul>
          <li>
            <p>
              <code>&lt;name&gt;</code> is a name of virtual key code.
              This name must be started with <code>KeyCode::VK_CHANGE_INPUTSOURCE_</code>.
              <br />
              For example, <code>&lt;name&gt;KeyCode::VK_CHANGE_INPUTSOURCE_YOUR_LANGUAGE&lt;/name&gt;</code>.
            </p>
          </li>
          <li>
            <p>
              <code>&lt;inputsourceid_equal&gt;</code> is a input source id of target input source.
              <br />
              <a href="#inputsourceid">How to examine input source id.</a>
            </p>
          </li>
        </ul>

        <h3>Prepared virtual key code definitions</h3>
        <p>
          Karabiner provides
          <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/vkchangeinputsourcedef.xml">various virtual key code definitions</a>.
          <br />
          You can use them without <code>&lt;vkchangeinputsourcedef&gt;</code> in private.xml.
        </p>
      </section>

      <section>
        <div class="page-header">
          <h1 id="include">Include external XML</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can include external xml files by <code>&lt;include&gt;</code>.
        </p>

        <b>private.xml</b>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <include path="core.xml" />
          |</root>
        {{/indented_xml}}

        <b>core.xml</b>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <item>
          |    <name>Swap Space and Tab</name>
          |    <identifier>private.swap_space_and_tab</identifier>
          |    <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
          |    <autogen>__KeyToKey__ KeyCode::TAB, KeyCode::SPACE</autogen>
          |  </item>
          |</root>
        {{/indented_xml}}

        <h2 id="dropbox">&lt;include&gt; with Dropbox</h2>
        <p>
          You can synchronize your private.xml by Dropbox or other file syncing service.
        </p>

        <b>private.xml</b>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <include path="{{curly}} ENV_HOME }}/Dropbox/private/Karabiner/core.xml" />
          |</root>
        {{/indented_xml}}

        <b>Dropbox/private/Karabiner/core.xml</b>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <item>
          |    <name>Dropbox Test!</name>
          |  </item>
          |</root>
        {{/indented_xml}}

        <h2 id="include-with-replacementdef">&lt;include&gt; with &lt;replacementdef&gt;</h2>
        <p>
          <code>&lt;replacementdef&gt;</code> in <code>&lt;include&gt;</code> has a local scope.
          These <code>&lt;replacementdef&gt;</code> are effective only in included file.
        </p>

        <b>private.xml</b>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <!-- Swap Space and Escape -->
          |  <include path="core.xml">
          |    <replacementdef>
          |      <replacementname>KEY1</replacementname>
          |      <replacementvalue>KeyCode::SPACE</replacementvalue>
          |    </replacementdef>
          |    <replacementdef>
          |      <replacementname>KEY2</replacementname>
          |      <replacementvalue>KeyCode::ESCAPE</replacementvalue>
          |    </replacementdef>
          |  </include>
          |
          |  <!-- Swap Tab and Return -->
          |  <include path="core.xml">
          |    <replacementdef>
          |      <replacementname>KEY1</replacementname>
          |      <replacementvalue>KeyCode::TAB</replacementvalue>
          |    </replacementdef>
          |    <replacementdef>
          |      <replacementname>KEY2</replacementname>
          |      <replacementvalue>KeyCode::RETURN</replacementvalue>
          |    </replacementdef>
          |  </include>
          |</root>
        {{/indented_xml}}

        <b>core.xml</b>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <item>
          |    <name>Swap {{curly}} KEY1 }} and {{curly}} KEY2 }}</name>
          |    <identifier>private.swap_{{curly}} KEY1 }}_{{curly}} KEY2 }}</identifier>
          |    <autogen>__KeyToKey__ {{curly}} KEY1 }}, {{curly}} KEY2 }}</autogen>
          |    <autogen>__KeyToKey__ {{curly}} KEY2 }}, {{curly}} KEY1 }}</autogen>
          |  </item>
          |</root>
        {{/indented_xml}}

        <h2 id="include-once">once attribute</h2>
        <p>
          You can include specific files only once by <code>&lt;include&gt;</code> with <code>once</code> attribute.<br />
          For example, the core.xml will be included only once.
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <include once="true" path="core.xml" /> <!-- will be included. -->
          |  <include once="true" path="core.xml" /> <!-- will be ignored. -->
          |</root>
        {{/indented_xml}}

        <h3>mixture of once attribute</h3>
        <p>
          Karabiner remembers the included files by each <code>&lt;included&gt;</code> even if the <code>&lt;included&gt;</code> does not have <code>once</code> attribute.<br />
          And Karabiner will check the included files only when <code>once</code> attribute exists.
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <include             path="core.xml" /> <!-- will be included. -->
          |  <include once="true" path="core.xml" /> <!-- will be ignored. -->
          |</root>
        {{/indented_xml}}

        <p>
          If the second <code>&lt;include&gt;</code> does not have <code>once</code> attribute, the second <code>&lt;include&gt;</code> always includes the file.
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <include once="true" path="core.xml" /> <!-- will be included. -->
          |  <include             path="core.xml" /> <!-- will be included. -->
          |</root>
        {{/indented_xml}}

      </section>

      <section>
        <div class="page-header">
          <h1 id="replacementdef">String replacement</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can define replacement by <code>&lt;replacementdef&gt;</code>.
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <replacementdef>
          |    <replacementname>MY_IGNORE_APPS</replacementname>
          |    <replacementvalue>SAFARI, FIREFOX, FINDER</replacementvalue>
          |  </replacementdef>
          |
          |  <item>
          |    <name>Change space to tab except in my ignore apps.</name>
          |    <identifier>private.space_to_tab_except_my_ignore_apps</identifier>
          |    <not>{{curly}} MY_IGNORE_APPS }}</not>
          |    <autogen>__KeyToKey__ KeyCode::SPACE, KeyCode::TAB</autogen>
          |  </item>
          |</root>
        {{/indented_xml}}
        <p>
          {{curly}} &lt;replacementname&gt; }} is replaced by <code>&lt;replacementvalue&gt;</code>.
        </p>

        {{#indented_xml}}
          |<not>{{curly}} MY_IGNORE_APPS }}</not>
          |
          |<!-- ↑ is replaced to ↓ -->
          |
          |<not>SAFARI, FIREFOX, FINDER</not>
        {{/indented_xml}}

        <h2>Global scope replacement</h2>
        <p>
          <code>&lt;replacementdef&gt;</code> written in private.xml has a global scope.
          It is effective for the entire XML.
        </p>
        <p>
          When you wrote multiple <code>&lt;replacementdef&gt;</code> for one <code>&lt;replacementname&gt;</code>,
          only the first one is effective.
        </p>

        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <replacementdef>
          |    <replacementname>MY_KEYCODE</replacementname>
          |    <replacementvalue>KeyCode::SPACE</replacementvalue>
          |  </replacementdef>
          |
          |  <!-- This replacementdef of MY_KEYCODE is ignored -->
          |  <replacementdef>
          |    <replacementname>MY_KEYCODE</replacementname>
          |    <replacementvalue>KeyCode::TAB</replacementvalue>
          |  </replacementdef>
          |
          |  <item>
          |    <name>{{curly}} MY_KEYCODE }} is KeyCode::SPACE</name>
          |  </item>
          |</root>
        {{/indented_xml}}

        <h2>Local scope replacement</h2>
        <p>
          You can define a local scope replacement
          by using <code>&lt;replacementdef&gt;</code> under <code>&lt;include&gt;</code>.
          <br />
          See
          <a href="#include-with-replacementdef">&lt;include&gt; with &lt;replacementdef&gt;</a> section.
        </p>

        <h2>Prepared replacement definitions</h2>
        <p>
          Karabiner provides
          <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/replacementdef.xml">various replacement definitions</a>.
          <br />
          You can use them without <code>&lt;replacementdef&gt;</code> in private.xml.
        </p>
        <p>
          You can also overwrite existing replacement definitions by private.xml.
          <br />
          An example of overwriting VI_H:
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <replacementdef>
          |    <replacementname>VI_H</replacementname>
          |    <replacementvalue>KeyCode::J</replacementvalue>
          |  </replacementdef>
          |</root>
        {{/indented_xml}}
      </section>

      <section>
        <div class="page-header">
          <h1 id="keycode">New keycode definition</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can define new KeyCode by <code>&lt;symbol_map&gt;</code>.
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <symbol_map type="KeyCode" name="MY_LANGUAGE_KEY" value="0x32" />
          |
          |  <item>
          |    <name>Change KeyCode::MY_LANGUAGE_KEY to tab.</name>
          |    <identifier>private.my_language_key_to_tab</identifier>
          |    <autogen>__KeyToKey__ KeyCode::MY_LANGUAGE_KEY, KeyCode::TAB</autogen>
          |  </item>
          |</root>
        {{/indented_xml}}

        <h2 id="rawvalue">Specify a raw value</h2>
        <p>
          You can specify a raw value by using KeyCode::RawValue.
        </p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <item>
          |    <name>Change right option key to tab key</name>
          |    <identifier>private.right_option_key_to_tab_key</identifier>
          |    <!-- change right option key (0x3d) to tab key (0x30) -->
          |    <autogen>__KeyToKey__ KeyCode::RawValue::0x3d, KeyCode::RawValue::0x30</autogen>
          |  </item>
          |</root>
        {{/indented_xml}}
      </section>

      <section>
        <div class="page-header">
          <h1 id="modifier">New virtual modifier definition</h1>
        </div>

        <h2>An example</h2>
        <p>
          You can define new virtual modifier by <code>&lt;modifierdef&gt;</code>.
        </p>
        <div class="alert alert-warning">
          Note: Added virtual modifiers are not shown in EventViewer.
        </div>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <modifierdef>MY_HYPER</modifierdef>
          |  <modifierdef>MY_SUPER</modifierdef>
          |
          |  <item>
          |    <name>My hyper and super key</name>
          |    <appendix>* Change the right shift key to my hyper key.</appendix>
          |    <appendix>* Change the right option key to my super key.</appendix>
          |    <appendix></appendix>
          |    <appendix>* Change hyper+a,s to 1,2.</appendix>
          |    <appendix>* Change super+a,s to brightness controls.</appendix>
          |    <identifier>private.hyper_super</identifier>
          |
          |    <!-- Change the right shift key to my hyper key. -->
          |    <autogen>__KeyToKey__ KeyCode::SHIFT_R, KeyCode::VK_MODIFIER_MY_HYPER</autogen>
          |    <!-- Change the right option key to my super key. -->
          |    <autogen>__KeyToKey__ KeyCode::OPTION_R, KeyCode::VK_MODIFIER_MY_SUPER</autogen>
          |
          |    <!-- hyper key settings -->
          |    <autogen>
          |      __KeyToKey__
          |      KeyCode::A, ModifierFlag::MY_HYPER,
          |      KeyCode::KEY_1,
          |    </autogen>
          |    <autogen>
          |      __KeyToKey__
          |      KeyCode::S, ModifierFlag::MY_HYPER,
          |      KeyCode::KEY_2,
          |    </autogen>
          |
          |    <!-- super key settings -->
          |    <autogen>
          |      __KeyToKey__
          |      KeyCode::A, ModifierFlag::MY_SUPER,
          |      ConsumerKeyCode::BRIGHTNESS_DOWN,
          |    </autogen>
          |    <autogen>
          |      __KeyToKey__
          |      KeyCode::S, ModifierFlag::MY_SUPER,
          |      ConsumerKeyCode::BRIGHTNESS_UP,
          |    </autogen>
          |
          |  </item>
          |</root>
        {{/indented_xml}}

        <h2>Added KeyCode and ModifierFlag by &lt;modifierdef&gt;</h2>
        <p>
          <code>&lt;modifierdef&gt;</code> adds some KeyCode and ModifierFlag.<br />
          For generic usage, <code>ModifierFlag::MY_HYPER</code> and <code>KeyCode::VK_MODIFIER_MY_HYPER</code> are important.<br />
          (Replace MY_HYPER with your own modifier's name.)
        </p>
        <p>
          These are full KeyCode and ModifierFlag that added by <code>&lt;modifierdef&gt;MY_HYPER&lt;/modifierdef&gt;:</code>
        </p>
        <table class="table">
          <tbody>
            <tr>
              <th>KeyCode or ModifierFlag</th>
              <th>Description</th>
            </tr>
            <tr>
              <td>ModifierFlag::MY_HYPER</td>
              <td>ModifierFlag for new modifier.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_MODIFIER_MY_HYPER</td>
              <td>KeyCode for new modifier.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_LOCK_MY_HYPER</td>
              <td>KeyCode to toggle new modifier lock.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_LOCK_MY_HYPER_FORCE_ON</td>
              <td>KeyCode to turn new modifier lock on.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_LOCK_MY_HYPER_FORCE_OFF</td>
              <td>KeyCode to turn new modifier lock off.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_NEGATIVE_LOCK_MY_HYPER</td>
              <td>KeyCode to toggle new modifier negative lock.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_NEGATIVE_LOCK_MY_HYPER_FORCE_ON</td>
              <td>KeyCode to turn new modifier negative lock on.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_NEGATIVE_LOCK_MY_HYPER_FORCE_OFF</td>
              <td>KeyCode to turn new modifier negative lock off.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_STICKY_MY_HYPER</td>
              <td>KeyCode to toggle new modifier sticky state.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_STICKY_MY_HYPER_FORCE_ON</td>
              <td>KeyCode to turn new modifier sticky state on.</td>
            </tr>
            <tr>
              <td>KeyCode::VK_STICKY_MY_HYPER_FORCE_OFF</td>
              <td>KeyCode to turn new modifier sticky state off.</td>
            </tr>
          </tbody>
        </table>

        <h2 id="modifierdef-attributes">Attributes</h2>
        <p>
          Add <code>notify="false"</code> attribute to modifierdef
          if you want to hide an indicator of modifier locks and sticky for new modifier.
        </p>

        {{#indented_xml}}
          |  <modifierdef notify="false">MY_HYPER2</modifierdef>
        {{/indented_xml}}

        <p>
          Without <code>notify="false"</code>, Karabiner shows an indicator when your own modifier is locked.
          <br />
          <img
          alt="lock indicator"
          {{#imgsrc}}
            img/lock-indicator.png
          {{/imgsrc}}
          />
        </p>

        <h2 id="prepared-modifierdef">Prepared virtual modifier definitions</h2>
        <p>
          Karabiner provides some prepared virtual modifier.
          <br />
          You can use them without <code>&lt;modifierdef&gt;</code> in private.xml.
        </p>
        <ul>
          <li>
            <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/modifierdef.xml">List of virtual modifier definition.</a>
          </li>
        </ul>
      </section>

      <section>
        <div class="page-header">
          <h1 id="expand">Expand prepared settings's capabilities</h1>
        </div>

        <p>
          Some prepared settings provides a point to expand their capabilities..<br />
          For example, Emacs Mode allows you to specify ignored apps.
        </p>

        <p>
          You can expand them by using replacementdef.
        </p>

        <h2>Examples</h2>
        <p>Set Emacs Mode ignored apps to EMACS,TERMINAL,VI</p>
        {{#indented_xml}}
          |<?xml version="1.0"?>
          |<root>
          |  <replacementdef>
          |    <replacementname>EMACS_MODE_IGNORE_APPS</replacementname>
          |    <replacementvalue>
          |      EMACS,
          |      TERMINAL,
          |      VI,
          |    </replacementvalue>
          |  </replacementdef>
          |</root>
        {{/indented_xml}}

        <p>
          The replacements are defined in
          <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/replacementdef.xml">replacementdef.xml</a>.
        </p>
      </section>

      <section>
        <div class="page-header">
          <h1 id="prepared">How to modify prepared settings</h1>
        </div>

        <ol class="steps">
          <li>
            Get source code from <a href="https://github.com/tekezo/Karabiner" target="_blank">repository</a>.
          </li>

          <li>
            Prepared settings are defined in these files:
            <ul>
              <li>
                <a target="_blank" href="https://github.com/tekezo/Karabiner/blob/version_10.11.0/src/core/server/Resources/checkbox.xml">src/core/server/Resources/checkbox.xml</a>
              </li>
              <li>
                <a target="_blank" href="https://github.com/tekezo/Karabiner/tree/version_10.11.0/src/core/server/Resources/include/checkbox/">src/core/server/Resources/include/checkbox/</a>
              </li>
            </ul>
            Modify them.
          </li>

          <li>
            Install XML files. Execute these commands in Terminal.
            <pre>{{#strip_indented_lines}}
              | $ cd src/core/server/Resources
              | $ make install
            {{/strip_indented_lines}}</pre>
            (This commands ask your password in order to modify XML files in /Applications/Karabiner.app.)
          </li>

          <li>
            Then, reload XML files by "Reload XML" button on Preference.
            <div class="row">
              <div class="col-lg-4">
                {{#lightbox}}
                  img/karabiner-xml5@2x.png Reload XML
                {{/lightbox}}
              </div>
            </div>
          </li>
        </ol>

        Please <a target="_blank" href="https://github.com/tekezo/Karabiner/pulls">send a pull request on GitHub</a> when improvement is complete.
      </section>
    </div>
    <div class="col-md-3">
      {{> ../../pqrs_tabs }}
    </div>
  </div>
</div>
